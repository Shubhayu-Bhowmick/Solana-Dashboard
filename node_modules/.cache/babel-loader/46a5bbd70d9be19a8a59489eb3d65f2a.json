{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TRANSACTION_SETTINGS = void 0;\nexports.averageResponseTime = averageResponseTime;\nexports.canBeUsed = canBeUsed;\nexports.cleanOldMessages = cleanOldMessages;\nexports.close = close;\nexports.commitIndexedDBTransaction = commitIndexedDBTransaction;\nexports.create = create;\nexports.createDatabase = createDatabase;\nexports[\"default\"] = void 0;\nexports.getAllMessages = getAllMessages;\nexports.getIdb = getIdb;\nexports.getMessagesHigherThan = getMessagesHigherThan;\nexports.getOldMessages = getOldMessages;\nexports.microSeconds = void 0;\nexports.onMessage = onMessage;\nexports.postMessage = postMessage;\nexports.removeMessagesById = removeMessagesById;\nexports.type = void 0;\nexports.writeMessage = writeMessage;\n\nvar _util = require(\"../util.js\");\n\nvar _obliviousSet = require(\"oblivious-set\");\n\nvar _options = require(\"../options\");\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n * \n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\n\n\nvar microSeconds = _util.microSeconds;\nexports.microSeconds = microSeconds;\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nvar TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nexports.TRANSACTION_SETTINGS = TRANSACTION_SETTINGS;\nvar type = 'idb';\nexports.type = type;\n\nfunction getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n\n  return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\n\nfunction commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\n\nfunction createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n\n  var openRequest = IndexedDB.open(dbName);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\n\nfunction writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\n\nfunction getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction removeMessagesById(db, ids) {\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\n\nfunction getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return removeMessagesById(db, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\n\nfunction create(channelName, options) {\n  options = (0, _options.fillOptionsWithDefaults)(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: (0, _util.randomToken)(),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new _obliviousSet.ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: _util.PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return (0, _util.sleep)(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return _util.PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return _util.PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return _util.PROMISE_RESOLVED_VOID;\n  });\n}\n\nfunction close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\n\nfunction postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if ((0, _util.randomInt)(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\n\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\n\nfunction canBeUsed() {\n  if (_util.isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\n\nfunction averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\n\nvar _default = {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/HeadHawk/Desktop/solana/solana-defi-dashboard/node_modules/broadcast-channel/dist/lib/methods/indexed-db.js"],"names":["Object","defineProperty","exports","value","TRANSACTION_SETTINGS","averageResponseTime","canBeUsed","cleanOldMessages","close","commitIndexedDBTransaction","create","createDatabase","getAllMessages","getIdb","getMessagesHigherThan","getOldMessages","microSeconds","onMessage","postMessage","removeMessagesById","type","writeMessage","_util","require","_obliviousSet","_options","DB_PREFIX","OBJECT_STORE_ID","durability","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","tx","commit","channelName","IndexedDB","dbName","openRequest","open","onupgradeneeded","ev","db","target","result","createObjectStore","keyPath","autoIncrement","dbPromise","Promise","res","rej","onerror","onsuccess","readerUuid","messageJson","time","Date","getTime","writeObject","uuid","data","transaction","oncomplete","objectStore","add","ret","openCursor","cursor","push","lastCursorId","keyRangeValue","IDBKeyRange","bound","Infinity","getAll","getAllRequest","err","e","openCursorRequest","id","ids","all","map","deleteRequest","ttl","olderThen","msgObk","then","tooOld","msg","options","fillOptionsWithDefaults","state","closed","randomToken","eMIs","ObliviousSet","idb","writeBlockPromise","PROMISE_RESOLVED_VOID","messagesCallback","readQueuePromises","onclose","_readLoop","readNewMessages","sleep","fallbackInterval","_filterMessage","msgObj","has","messagesCallbackTime","newerMessages","useMessages","filter","sort","msgObjA","msgObjB","forEach","channelState","randomInt","fn","isNode","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TRANSACTION_SETTINGS = void 0;\nexports.averageResponseTime = averageResponseTime;\nexports.canBeUsed = canBeUsed;\nexports.cleanOldMessages = cleanOldMessages;\nexports.close = close;\nexports.commitIndexedDBTransaction = commitIndexedDBTransaction;\nexports.create = create;\nexports.createDatabase = createDatabase;\nexports[\"default\"] = void 0;\nexports.getAllMessages = getAllMessages;\nexports.getIdb = getIdb;\nexports.getMessagesHigherThan = getMessagesHigherThan;\nexports.getOldMessages = getOldMessages;\nexports.microSeconds = void 0;\nexports.onMessage = onMessage;\nexports.postMessage = postMessage;\nexports.removeMessagesById = removeMessagesById;\nexports.type = void 0;\nexports.writeMessage = writeMessage;\n\nvar _util = require(\"../util.js\");\n\nvar _obliviousSet = require(\"oblivious-set\");\n\nvar _options = require(\"../options\");\n\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n * \n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\nvar microSeconds = _util.microSeconds;\nexports.microSeconds = microSeconds;\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nvar TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nexports.TRANSACTION_SETTINGS = TRANSACTION_SETTINGS;\nvar type = 'idb';\nexports.type = type;\n\nfunction getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n\n  return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\n\nfunction commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\n\nfunction createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n\n  var openRequest = IndexedDB.open(dbName);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\n\nfunction writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\n\nfunction getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction removeMessagesById(db, ids) {\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\n\nfunction getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return removeMessagesById(db, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\n\nfunction create(channelName, options) {\n  options = (0, _options.fillOptionsWithDefaults)(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: (0, _util.randomToken)(),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new _obliviousSet.ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: _util.PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return (0, _util.sleep)(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return _util.PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return _util.PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return _util.PROMISE_RESOLVED_VOID;\n  });\n}\n\nfunction close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\n\nfunction postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if ((0, _util.randomInt)(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\n\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\n\nfunction canBeUsed() {\n  if (_util.isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\n\nfunction averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\n\nvar _default = {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}