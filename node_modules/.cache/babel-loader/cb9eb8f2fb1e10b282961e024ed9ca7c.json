{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HeadHawk\\\\Desktop\\\\solana\\\\solana-defi-dashboard\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useMoralis, useMoralisSolanaApi, useMoralisSolanaCall } from \"react-moralis\";\nimport { Blockie, Button, Select, Loading, Table, Avatar, Tag, getEllipsisTxt } from \"web3uikit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  var _data$nativeBalance, _data$tokens, _data$nfts;\n\n  const [network, setNetwork] = useState(\"mainnet\");\n  const {\n    isAuthenticated,\n    authenticate,\n    user,\n    isInitializing,\n    isInitialized,\n    isAuthenticating,\n    logout\n  } = useMoralis();\n  const {\n    account\n  } = useMoralisSolanaApi();\n  const {\n    fetch,\n    data,\n    isLoading\n  } = useMoralisSolanaCall(account.getPortfolio);\n  /**\r\n   * @description the function handles authentication with phantom wallet\r\n   */\n\n  const onConnectPhantomWallet = async () => {\n    await authenticate({\n      type: \"sol\"\n    });\n  };\n\n  useEffect(() => {\n    if (isAuthenticated && user.get(\"solAddress\")) {\n      // Fetch only when authenticated\n      fetch({\n        params: {\n          address: user.get(\"solAddress\"),\n          network\n        }\n      });\n    }\n  }, [fetch, isAuthenticated, user, network]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      gap: \"1rem\"\n    },\n    children: !isInitialized || isInitializing ? /*#__PURE__*/_jsxDEV(Loading, {\n      spinnerColor: \"#2E7DAF\",\n      size: 50\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isAuthenticated ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Blockie, {\n          seed: user === null || user === void 0 ? void 0 : user.get(\"solAddress\"),\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: user === null || user === void 0 ? void 0 : user.get(\"solAddress\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => logout(),\n          text: \"Disconnect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          label: \"Network\",\n          onChange: option => {\n            const {\n              id\n            } = option !== null && option !== void 0 ? option : {};\n            setNetwork(id);\n          },\n          defaultOptionIndex: 0,\n          options: [{\n            id: \"mainnet\",\n            label: \"Mainnet\"\n          }, {\n            id: \"devnet\",\n            label: \"Devnet\"\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loading, {\n          spinnerColor: \"#2E7DAF\",\n          text: \"Fetching Data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(Table, {\n          columnsConfig: \"80px 3fr 2fr 2fr\",\n          data: [[/*#__PURE__*/_jsxDEV(Avatar, {\n            isRounded: true,\n            theme: \"image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 23\n          }, this), \"SOL\", /*#__PURE__*/_jsxDEV(Tag, {\n            color: \"blue\",\n            text: \"Native Token\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 23\n          }, this), data === null || data === void 0 ? void 0 : (_data$nativeBalance = data.nativeBalance) === null || _data$nativeBalance === void 0 ? void 0 : _data$nativeBalance.solana], ...(data === null || data === void 0 ? void 0 : (_data$tokens = data.tokens) === null || _data$tokens === void 0 ? void 0 : _data$tokens.map(token => {\n            return [/*#__PURE__*/_jsxDEV(Avatar, {\n              isRounded: true,\n              theme: \"image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 25\n            }, this), getEllipsisTxt(token.associatedTokenAddress), /*#__PURE__*/_jsxDEV(Tag, {\n              color: \"red\",\n              text: \"SPL Token\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 25\n            }, this), token.amount];\n          })), ...(data === null || data === void 0 ? void 0 : (_data$nfts = data.nfts) === null || _data$nfts === void 0 ? void 0 : _data$nfts.map(nft => {\n            return [/*#__PURE__*/_jsxDEV(Avatar, {\n              isRounded: true,\n              theme: \"image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 25\n            }, this), getEllipsisTxt(nft.associatedTokenAddress), /*#__PURE__*/_jsxDEV(Tag, {\n              color: \"yellow\",\n              text: \"SPL NFT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 25\n            }, this), 1];\n          }))],\n          header: [\"\", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 21\n          }, this)],\n          maxPages: 3,\n          noPagination: true,\n          onPageNumberChanged: function noRefCheck() {},\n          pageSize: 5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Solana DeFi Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onConnectPhantomWallet,\n          isLoading: isAuthenticating,\n          loadingText: \"Authenticating...\",\n          text: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"okCqMLDHjTCIo+JGStT5uUhKEZc=\", false, function () {\n  return [useMoralis, useMoralisSolanaApi, useMoralisSolanaCall];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/HeadHawk/Desktop/solana/solana-defi-dashboard/src/App.js"],"names":["useEffect","useState","useMoralis","useMoralisSolanaApi","useMoralisSolanaCall","Blockie","Button","Select","Loading","Table","Avatar","Tag","getEllipsisTxt","App","network","setNetwork","isAuthenticated","authenticate","user","isInitializing","isInitialized","isAuthenticating","logout","account","fetch","data","isLoading","getPortfolio","onConnectPhantomWallet","type","get","params","address","width","height","display","flexDirection","justifyContent","alignItems","gap","option","id","label","nativeBalance","solana","tokens","map","token","associatedTokenAddress","amount","nfts","nft","noRefCheck"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SACEC,UADF,EAEEC,mBAFF,EAGEC,oBAHF,QAIO,eAJP;AAKA,SACEC,OADF,EAEEC,MAFF,EAGEC,MAHF,EAIEC,OAJF,EAKEC,KALF,EAMEC,MANF,EAOEC,GAPF,EAQEC,cARF,QASO,WATP;;;;AAWA,SAASC,GAAT,GAAe;AAAA;;AAAA;;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,SAAD,CAAtC;AACA,QAAM;AACJe,IAAAA,eADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA,cAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,gBANI;AAOJC,IAAAA;AAPI,MAQFpB,UAAU,EARd;AASA,QAAM;AAAEqB,IAAAA;AAAF,MAAcpB,mBAAmB,EAAvC;AACA,QAAM;AAAEqB,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAA6BtB,oBAAoB,CAACmB,OAAO,CAACI,YAAT,CAAvD;AAEA;AACF;AACA;;AACE,QAAMC,sBAAsB,GAAG,YAAY;AACzC,UAAMX,YAAY,CAAC;AACjBY,MAAAA,IAAI,EAAE;AADW,KAAD,CAAlB;AAGD,GAJD;;AAMA7B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,eAAe,IAAIE,IAAI,CAACY,GAAL,CAAS,YAAT,CAAvB,EAA+C;AAC7C;AACAN,MAAAA,KAAK,CAAC;AACJO,QAAAA,MAAM,EAAE;AACNC,UAAAA,OAAO,EAAEd,IAAI,CAACY,GAAL,CAAS,YAAT,CADH;AAENhB,UAAAA;AAFM;AADJ,OAAD,CAAL;AAMD;AACF,GAVQ,EAUN,CAACU,KAAD,EAAQR,eAAR,EAAyBE,IAAzB,EAA+BJ,OAA/B,CAVM,CAAT;AAYA,sBACE;AACE,IAAA,KAAK,EAAE;AACLmB,MAAAA,KAAK,EAAE,OADF;AAELC,MAAAA,MAAM,EAAE,OAFH;AAGLC,MAAAA,OAAO,EAAE,MAHJ;AAILC,MAAAA,aAAa,EAAE,QAJV;AAKLC,MAAAA,cAAc,EAAE,QALX;AAMLC,MAAAA,UAAU,EAAE,QANP;AAOLC,MAAAA,GAAG,EAAE;AAPA,KADT;AAAA,cAWG,CAACnB,aAAD,IAAkBD,cAAlB,gBACC,QAAC,OAAD;AAAS,MAAA,YAAY,EAAC,SAAtB;AAAgC,MAAA,IAAI,EAAE;AAAtC;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC;AAAA,gBACGH,eAAe,gBACd;AAAA,gCACE,QAAC,OAAD;AAAS,UAAA,IAAI,EAAEE,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEY,GAAN,CAAU,YAAV,CAAf;AAAwC,UAAA,IAAI,EAAE;AAA9C;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAIZ,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEY,GAAN,CAAU,YAAV;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,MAAMR,MAAM,EAA7B;AAAiC,UAAA,IAAI,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,MAAD;AACE,UAAA,KAAK,EAAC,SADR;AAEE,UAAA,QAAQ,EAAGkB,MAAD,IAAY;AACpB,kBAAM;AAAEC,cAAAA;AAAF,gBAASD,MAAT,aAASA,MAAT,cAASA,MAAT,GAAmB,EAAzB;AACAzB,YAAAA,UAAU,CAAC0B,EAAD,CAAV;AACD,WALH;AAME,UAAA,kBAAkB,EAAE,CANtB;AAOE,UAAA,OAAO,EAAE,CACP;AACEA,YAAAA,EAAE,EAAE,SADN;AAEEC,YAAAA,KAAK,EAAE;AAFT,WADO,EAKP;AACED,YAAAA,EAAE,EAAE,QADN;AAEEC,YAAAA,KAAK,EAAE;AAFT,WALO;AAPX;AAAA;AAAA;AAAA;AAAA,gBAJF,EAsBGhB,SAAS,gBACR,QAAC,OAAD;AAAS,UAAA,YAAY,EAAC,SAAtB;AAAgC,UAAA,IAAI,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,gBADQ,gBAGR,QAAC,KAAD;AACE,UAAA,aAAa,EAAC,kBADhB;AAEE,UAAA,IAAI,EAAE,CACJ,cACE,QAAC,MAAD;AAAQ,YAAA,SAAS,MAAjB;AAAkB,YAAA,KAAK,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE,KAFF,eAGE,QAAC,GAAD;AAAK,YAAA,KAAK,EAAC,MAAX;AAAkB,YAAA,IAAI,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,kBAHF,EAIED,IAJF,aAIEA,IAJF,8CAIEA,IAAI,CAAEkB,aAJR,wDAIE,oBAAqBC,MAJvB,CADI,EAOJ,IAAGnB,IAAH,aAAGA,IAAH,uCAAGA,IAAI,CAAEoB,MAAT,iDAAG,aAAcC,GAAd,CAAmBC,KAAD,IAAW;AAC9B,mBAAO,cACL,QAAC,MAAD;AAAQ,cAAA,SAAS,MAAjB;AAAkB,cAAA,KAAK,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,oBADK,EAELnC,cAAc,CAACmC,KAAK,CAACC,sBAAP,CAFT,eAGL,QAAC,GAAD;AAAK,cAAA,KAAK,EAAC,KAAX;AAAiB,cAAA,IAAI,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,oBAHK,EAILD,KAAK,CAACE,MAJD,CAAP;AAMD,WAPE,CAAH,CAPI,EAeJ,IAAGxB,IAAH,aAAGA,IAAH,qCAAGA,IAAI,CAAEyB,IAAT,+CAAG,WAAYJ,GAAZ,CAAiBK,GAAD,IAAS;AAC1B,mBAAO,cACL,QAAC,MAAD;AAAQ,cAAA,SAAS,MAAjB;AAAkB,cAAA,KAAK,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,oBADK,EAELvC,cAAc,CAACuC,GAAG,CAACH,sBAAL,CAFT,eAGL,QAAC,GAAD;AAAK,cAAA,KAAK,EAAC,QAAX;AAAoB,cAAA,IAAI,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,oBAHK,EAIL,CAJK,CAAP;AAMD,WAPE,CAAH,CAfI,CAFR;AA0BE,UAAA,MAAM,EAAE,CACN,EADM,eAEN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFM,eAGN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHM,eAIN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJM,CA1BV;AAgCE,UAAA,QAAQ,EAAE,CAhCZ;AAiCE,UAAA,YAAY,MAjCd;AAkCE,UAAA,mBAAmB,EAAE,SAASI,UAAT,GAAsB,CAAE,CAlC/C;AAmCE,UAAA,QAAQ,EAAE;AAnCZ;AAAA;AAAA;AAAA;AAAA,gBAzBJ;AAAA,sBADc,gBAkEd;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AACE,UAAA,OAAO,EAAExB,sBADX;AAEE,UAAA,SAAS,EAAEP,gBAFb;AAGE,UAAA,WAAW,EAAC,mBAHd;AAIE,UAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAnEJ;AAdJ;AAAA;AAAA;AAAA;AAAA,UADF;AAgGD;;GAnIQR,G;UAUHX,U,EACgBC,mB,EACeC,oB;;;KAZ5BS,G;AAqIT,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport {\r\n  useMoralis,\r\n  useMoralisSolanaApi,\r\n  useMoralisSolanaCall,\r\n} from \"react-moralis\";\r\nimport {\r\n  Blockie,\r\n  Button,\r\n  Select,\r\n  Loading,\r\n  Table,\r\n  Avatar,\r\n  Tag,\r\n  getEllipsisTxt,\r\n} from \"web3uikit\";\r\n\r\nfunction App() {\r\n  const [network, setNetwork] = useState(\"mainnet\");\r\n  const {\r\n    isAuthenticated,\r\n    authenticate,\r\n    user,\r\n    isInitializing,\r\n    isInitialized,\r\n    isAuthenticating,\r\n    logout,\r\n  } = useMoralis();\r\n  const { account } = useMoralisSolanaApi();\r\n  const { fetch, data, isLoading } = useMoralisSolanaCall(account.getPortfolio);\r\n\r\n  /**\r\n   * @description the function handles authentication with phantom wallet\r\n   */\r\n  const onConnectPhantomWallet = async () => {\r\n    await authenticate({\r\n      type: \"sol\",\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && user.get(\"solAddress\")) {\r\n      // Fetch only when authenticated\r\n      fetch({\r\n        params: {\r\n          address: user.get(\"solAddress\"),\r\n          network,\r\n        },\r\n      });\r\n    }\r\n  }, [fetch, isAuthenticated, user, network]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        gap: \"1rem\",\r\n      }}\r\n    >\r\n      {!isInitialized || isInitializing ? (\r\n        <Loading spinnerColor=\"#2E7DAF\" size={50} />\r\n      ) : (\r\n        <>\r\n          {isAuthenticated ? (\r\n            <>\r\n              <Blockie seed={user?.get(\"solAddress\")} size={20} />\r\n              <p>{user?.get(\"solAddress\")}</p>\r\n              <Button onClick={() => logout()} text=\"Disconnect Wallet\" />\r\n              <Select\r\n                label=\"Network\"\r\n                onChange={(option) => {\r\n                  const { id } = option ?? {};\r\n                  setNetwork(id);\r\n                }}\r\n                defaultOptionIndex={0}\r\n                options={[\r\n                  {\r\n                    id: \"mainnet\",\r\n                    label: \"Mainnet\",\r\n                  },\r\n                  {\r\n                    id: \"devnet\",\r\n                    label: \"Devnet\",\r\n                  },\r\n                ]}\r\n              />\r\n              {isLoading ? (\r\n                <Loading spinnerColor=\"#2E7DAF\" text=\"Fetching Data...\" />\r\n              ) : (\r\n                <Table\r\n                  columnsConfig=\"80px 3fr 2fr 2fr\"\r\n                  data={[\r\n                    [\r\n                      <Avatar isRounded theme=\"image\" />,\r\n                      \"SOL\",\r\n                      <Tag color=\"blue\" text=\"Native Token\" />,\r\n                      data?.nativeBalance?.solana,\r\n                    ],\r\n                    ...data?.tokens?.map((token) => {\r\n                      return [\r\n                        <Avatar isRounded theme=\"image\" />,\r\n                        getEllipsisTxt(token.associatedTokenAddress),\r\n                        <Tag color=\"red\" text=\"SPL Token\" />,\r\n                        token.amount,\r\n                      ];\r\n                    }),\r\n                    ...data?.nfts?.map((nft) => {\r\n                      return [\r\n                        <Avatar isRounded theme=\"image\" />,\r\n                        getEllipsisTxt(nft.associatedTokenAddress),\r\n                        <Tag color=\"yellow\" text=\"SPL NFT\" />,\r\n                        1,\r\n                      ];\r\n                    }),\r\n                  ]}\r\n                  header={[\r\n                    \"\",\r\n                    <span>Name</span>,\r\n                    <span>Type</span>,\r\n                    <span>Amount</span>,\r\n                  ]}\r\n                  maxPages={3}\r\n                  noPagination\r\n                  onPageNumberChanged={function noRefCheck() {}}\r\n                  pageSize={5}\r\n                />\r\n              )}\r\n            </>\r\n          ) : (\r\n            <>\r\n              <h1>Solana DeFi Dashboard</h1>\r\n              <Button\r\n                onClick={onConnectPhantomWallet}\r\n                isLoading={isAuthenticating}\r\n                loadingText=\"Authenticating...\"\r\n                text=\"Connect Wallet\"\r\n              />\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}