import CustomAuth, { CustomAuthArgs } from "@toruslabs/customauth";
import { ADAPTER_CATEGORY_TYPE, ADAPTER_STATUS_TYPE, AdapterInitOptions, AdapterNamespaceType, BaseAdapter, ChainNamespaceType, CustomChainConfig, SafeEventEmitterProvider, UserInfo } from "@web3auth/base";
import type { CustomAuthAdapterOptions, LoginSettings } from "./interface";
interface LoginParams {
    login_hint: string;
    loginProvider: string;
}
export declare class CustomAuthAdapter extends BaseAdapter<LoginParams> {
    readonly name: string;
    readonly adapterNamespace: AdapterNamespaceType;
    readonly type: ADAPTER_CATEGORY_TYPE;
    currentChainNamespace: ChainNamespaceType;
    customAuthInstance: CustomAuth | null;
    status: ADAPTER_STATUS_TYPE;
    readonly loginSettings: LoginSettings;
    private adapterSettings;
    private initSettings;
    private privKeyProvider;
    private store;
    private customAuthResult;
    private rehydrated;
    constructor(params: CustomAuthAdapterOptions);
    get provider(): SafeEventEmitterProvider | null;
    setChainConfig(customChainConfig: CustomChainConfig): void;
    setAdapterSettings(adapterSettings: CustomAuthArgs): void;
    init(options: AdapterInitOptions): Promise<void>;
    connect(params?: LoginParams): Promise<SafeEventEmitterProvider | null>;
    disconnect(options?: {
        cleanup: boolean;
    }): Promise<void>;
    getUserInfo(): Promise<Partial<UserInfo>>;
    private isRedirectResultAvailable;
    private setupProvider;
    private _syncCustomAuthResult;
}
export {};
