module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		0: 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "" + chunkId + ".customauthAdapter.cjs.js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["webpackJsonpCustomauthAdapter"] = window["webpackJsonpCustomauthAdapter"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("@web3auth/base");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/defineProperty");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("@toruslabs/customauth");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("loglevel");

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "getCustomAuthDefaultOptions", function() { return /* reexport */ getCustomAuthDefaultOptions; });
__webpack_require__.d(__webpack_exports__, "CustomAuthAdapter", function() { return /* reexport */ customAuthAdapter_CustomAuthAdapter; });

// EXTERNAL MODULE: external "@web3auth/base"
var base_ = __webpack_require__(0);

// CONCATENATED MODULE: ./src/config.ts

const getCustomAuthDefaultOptions = (chainNamespace, chainId) => {
  return {
    adapterSettings: {
      baseUrl: "",
      redirectPathName: "",
      uxMode: "redirect",
      enableLogging: true,
      network: "mainnet"
    },
    initSettings: {
      skipInit: true,
      skipSw: true,
      skipPrefetch: true
    },
    chainConfig: chainNamespace && chainId ? Object(base_["getChainConfig"])(chainNamespace, chainId) : undefined
  };
};
// EXTERNAL MODULE: external "@babel/runtime/helpers/defineProperty"
var defineProperty_ = __webpack_require__(1);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_);

// EXTERNAL MODULE: external "@toruslabs/customauth"
var customauth_ = __webpack_require__(2);
var customauth_default = /*#__PURE__*/__webpack_require__.n(customauth_);

// EXTERNAL MODULE: external "loglevel"
var external_loglevel_ = __webpack_require__(3);
var external_loglevel_default = /*#__PURE__*/__webpack_require__.n(external_loglevel_);

// CONCATENATED MODULE: ./src/constants.ts
const storeKey = "customauth-web3auth";
// CONCATENATED MODULE: ./src/memoryStore.ts

class memoryStore_MemoryStore {
  constructor() {
    defineProperty_default()(this, "store", {});
  }

  getItem(key) {
    return this.store[key];
  }

  setItem(key, value) {
    this.store[key] = value;
  }

}
// CONCATENATED MODULE: ./src/utils.ts


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }


function parseCustomAuthResult(redirectResult) {
  var _privateKey;

  const {
    result,
    method
  } = redirectResult;
  let userInfo;
  let publicAddress;
  let privateKey;
  let pubKey;

  if (method === customauth_["TORUS_METHOD"].TRIGGER_LOGIN) {
    ({
      userInfo,
      publicAddress,
      privateKey,
      pubKey
    } = result);
  } else if (method === customauth_["TORUS_METHOD"].TRIGGER_AGGREGATE_LOGIN) {
    const {
      userInfo: aggregateUserInfo
    } = result;
    ({
      publicAddress,
      privateKey,
      pubKey
    } = result);
    [userInfo] = aggregateUserInfo;
  } else if (method === customauth_["TORUS_METHOD"].TRIGGER_AGGREGATE_HYBRID_LOGIN) {
    const {
      singleLogin,
      aggregateLogins
    } = result;
    ({
      userInfo
    } = singleLogin);
    [{
      publicAddress,
      privateKey,
      pubKey
    }] = aggregateLogins;
  } else {
    throw new Error("Unsupported method type");
  }

  return _objectSpread(_objectSpread({
    publicAddress,
    privateKey: ((_privateKey = privateKey) === null || _privateKey === void 0 ? void 0 : _privateKey.padStart(64, "0")) || ""
  }, userInfo), {}, {
    pubKey
  });
}
const sessionStorageAvailable = Object(customauth_["storageAvailable"])("sessionStorage");
// CONCATENATED MODULE: ./src/customAuthStore.ts




class customAuthStore_CustomAuthStore {
  // eslint-disable-next-line no-use-before-define
  constructor(storage) {
    defineProperty_default()(this, "storage", void 0);

    this.storage = storage;

    try {
      if (!storage.getItem(storeKey)) {
        this.resetStore();
      }
    } catch (error) {// Storage is not available
    }
  }

  static getInstance() {
    if (!this.instance) {
      this.instance = new this(sessionStorageAvailable ? window.sessionStorage : new memoryStore_MemoryStore());
    }

    return this.instance;
  }

  toJSON() {
    return this.storage.getItem(storeKey);
  }

  resetStore() {
    const currStore = this.getStore();
    this.storage.setItem(storeKey, JSON.stringify({}));
    return currStore;
  }

  getStore() {
    return JSON.parse(this.storage.getItem(storeKey) || "{}");
  }

  get(key) {
    const store = JSON.parse(this.storage.getItem(storeKey) || "{}");
    return store[key];
  }

  set(key, value) {
    const store = JSON.parse(this.storage.getItem(storeKey) || "{}");
    store[key] = value;
    this.storage.setItem(storeKey, JSON.stringify(store));
  }

}

defineProperty_default()(customAuthStore_CustomAuthStore, "instance", void 0);
// CONCATENATED MODULE: ./src/customAuthAdapter.ts


function customAuthAdapter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function customAuthAdapter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? customAuthAdapter_ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : customAuthAdapter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }







const DEFAULT_CUSTOM_AUTH_RES = {
  publicAddress: "",
  privateKey: "",
  email: "",
  name: "",
  profileImage: "",
  aggregateVerifier: "",
  verifier: "",
  verifierId: "",
  typeOfLogin: customauth_["LOGIN"].GOOGLE
};
class customAuthAdapter_CustomAuthAdapter extends base_["BaseAdapter"] {
  // should be overridden in constructor or from setChainConfig function
  // before calling init function.
  constructor(params) {
    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;

    super();

    defineProperty_default()(this, "name", base_["WALLET_ADAPTERS"].CUSTOM_AUTH);

    defineProperty_default()(this, "adapterNamespace", base_["ADAPTER_NAMESPACES"].MULTICHAIN);

    defineProperty_default()(this, "type", base_["ADAPTER_CATEGORY"].IN_APP);

    defineProperty_default()(this, "currentChainNamespace", base_["CHAIN_NAMESPACES"].EIP155);

    defineProperty_default()(this, "customAuthInstance", null);

    defineProperty_default()(this, "status", base_["ADAPTER_STATUS"].NOT_READY);

    defineProperty_default()(this, "loginSettings", void 0);

    defineProperty_default()(this, "adapterSettings", null);

    defineProperty_default()(this, "initSettings", void 0);

    defineProperty_default()(this, "privKeyProvider", null);

    defineProperty_default()(this, "store", void 0);

    defineProperty_default()(this, "customAuthResult", customAuthAdapter_objectSpread({}, DEFAULT_CUSTOM_AUTH_RES));

    defineProperty_default()(this, "rehydrated", false);

    if (!params.loginSettings) {
      throw base_["WalletInitializationError"].invalidParams("loginSettings is required for customAuth adapter");
    }

    const defaultOptions = getCustomAuthDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);

    const adapterSettings = customAuthAdapter_objectSpread(customAuthAdapter_objectSpread({}, defaultOptions.adapterSettings), params.adapterSettings);

    const loginSettings = customAuthAdapter_objectSpread({}, params.loginSettings);

    const initSettings = customAuthAdapter_objectSpread(customAuthAdapter_objectSpread({}, defaultOptions.initSettings), params.initSettings);

    if (!adapterSettings.baseUrl) {
      throw base_["WalletInitializationError"].invalidParams("baseUrl is required in adapter settings");
    }

    if (!adapterSettings.redirectPathName) {
      throw base_["WalletInitializationError"].invalidParams("redirectPathName is required in adapter settings");
    }

    this.adapterSettings = adapterSettings;
    this.loginSettings = loginSettings;
    this.initSettings = initSettings; // if no chainNamespace is passed then chain config should be set before calling init

    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {
      var _params$chainConfig4;

      this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;
      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};
      this.chainConfig = customAuthAdapter_objectSpread(customAuthAdapter_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);

      if (!this.chainConfig.rpcTarget) {
        throw base_["WalletInitializationError"].invalidParams("rpcTarget is required in chainConfig");
      }
    } // syncing storage with custom auth result.


    this.store = customAuthStore_CustomAuthStore.getInstance();
    this.customAuthResult = customAuthAdapter_objectSpread(customAuthAdapter_objectSpread({}, this.customAuthResult), this.store.getStore());
  }

  get provider() {
    var _this$privKeyProvider;

    return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;
  } // should be called only before initialization.


  setChainConfig(customChainConfig) {
    super.setChainConfig(customChainConfig);
    this.currentChainNamespace = customChainConfig.chainNamespace;
  } // should be called only before initialization.


  setAdapterSettings(adapterSettings) {
    if (this.status === base_["ADAPTER_STATUS"].READY) return;
    const defaultOptions = getCustomAuthDefaultOptions();
    this.adapterSettings = customAuthAdapter_objectSpread(customAuthAdapter_objectSpread({}, defaultOptions.adapterSettings), adapterSettings);
  }

  async init(options) {
    super.checkInitializationRequirements();
    if (!this.adapterSettings) throw base_["WalletInitializationError"].invalidParams("adapterSettings is required for customAuth adapter");
    if (!this.chainConfig) throw base_["WalletInitializationError"].invalidParams("chainConfig is required for customAuth adapter");
    this.customAuthInstance = new customauth_default.a(this.adapterSettings);
    await this.customAuthInstance.init(this.initSettings);
    this.status = base_["ADAPTER_STATUS"].READY;
    this.emit(base_["ADAPTER_EVENTS"].READY, base_["WALLET_ADAPTERS"].CUSTOM_AUTH);

    try {
      if (options.autoConnect) this.rehydrated = true; // if adapter is already connected and cached then we can proceed to setup the provider

      if (this.customAuthResult.privateKey && options.autoConnect) {
        await this.setupProvider();
      } // if adapter is not connected then we should check if url contains redirect login result


      if (!this.customAuthResult.privateKey && (await this.isRedirectResultAvailable())) {
        await this.setupProvider();
      }
    } catch (error) {
      external_loglevel_default.a.error("Failed to parse direct auth result", error);
      this.emit("ERRORED", error);
    }
  }

  async connect(params) {
    super.checkConnectionRequirements();
    this.status = base_["ADAPTER_STATUS"].CONNECTING;
    this.emit(base_["ADAPTER_EVENTS"].CONNECTING, customAuthAdapter_objectSpread(customAuthAdapter_objectSpread({}, params), {}, {
      adapter: base_["WALLET_ADAPTERS"].CUSTOM_AUTH
    }));

    try {
      await this.setupProvider(params);
      return this.provider;
    } catch (error) {
      // ready again to be connected
      this.status = base_["ADAPTER_STATUS"].READY;
      this.emit(base_["ADAPTER_EVENTS"].ERRORED, error);
      external_loglevel_default.a.error("Error while connecting to custom auth", error);
      throw base_["WalletLoginError"].connectionError("Failed to login with CustomAuth");
    }
  }

  async disconnect() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      cleanup: false
    };
    if (this.status !== base_["ADAPTER_STATUS"].CONNECTED) throw base_["WalletLoginError"].notConnectedError("Not connected with wallet");
    this.store.resetStore();

    if (options.cleanup) {
      this.status = base_["ADAPTER_STATUS"].NOT_READY;
      this.customAuthInstance = null;
      this.privKeyProvider = null;
    } else {
      // ready to be connected again
      this.status = base_["ADAPTER_STATUS"].READY;
    }

    this.customAuthResult = customAuthAdapter_objectSpread({}, DEFAULT_CUSTOM_AUTH_RES);
    this.rehydrated = false;
    this.emit(base_["ADAPTER_EVENTS"].DISCONNECTED);
  }

  async getUserInfo() {
    if (this.status !== base_["ADAPTER_STATUS"].CONNECTED) throw base_["WalletLoginError"].notConnectedError("Not connected with wallet");
    return {
      email: this.customAuthResult.email,
      name: this.customAuthResult.name,
      profileImage: this.customAuthResult.profileImage,
      verifier: this.customAuthResult.verifier,
      verifierId: this.customAuthResult.verifierId
    };
  }

  async isRedirectResultAvailable() {
    const url = new URL(window.location.href);
    const hash = url.hash.substring(1);
    const queryParams = {};
    url.searchParams.forEach((value, key) => {
      queryParams[key] = value;
    });

    if (!hash && Object.keys(queryParams).length === 0) {
      return false;
    }

    if (!this.customAuthInstance) throw base_["WalletInitializationError"].notReady("customAuthInstance is not ready");
    const redirectResult = await this.customAuthInstance.getRedirectResult({
      replaceUrl: true,
      clearLoginDetails: true
    });

    if (redirectResult.error) {
      external_loglevel_default.a.error("Failed to parse custom auth result", redirectResult.error);

      if (redirectResult.error !== "Unsupported method type") {
        throw base_["WalletLoginError"].connectionError(redirectResult.error);
      }

      return false;
    }

    this.customAuthResult = parseCustomAuthResult(redirectResult);

    this._syncCustomAuthResult(this.customAuthResult);

    return !!this.customAuthResult.privateKey;
  }

  async setupProvider(params) {
    var _this$customAuthResul;

    if (!this.chainConfig) throw base_["WalletInitializationError"].invalidParams("chainConfig is required for customAuth adapter");

    if (this.currentChainNamespace === base_["CHAIN_NAMESPACES"].SOLANA) {
      const {
        SolanaPrivateKeyProvider
      } = await Promise.resolve(/* import() */).then(__webpack_require__.t.bind(null, 5, 7));
      this.privKeyProvider = new SolanaPrivateKeyProvider({
        config: {
          chainConfig: this.chainConfig
        }
      });
    } else if (this.currentChainNamespace === base_["CHAIN_NAMESPACES"].EIP155) {
      const {
        EthereumPrivateKeyProvider
      } = await Promise.resolve(/* import() */).then(__webpack_require__.t.bind(null, 6, 7));
      this.privKeyProvider = new EthereumPrivateKeyProvider({
        config: {
          chainConfig: this.chainConfig
        }
      });
    } else {
      throw new Error("Invalid chainNamespace: ".concat(this.currentChainNamespace, " found while connecting to wallet"));
    }

    if (!this.customAuthInstance) throw base_["WalletInitializationError"].notReady("customAuthInstance is not ready");
    let finalPrivKey = (_this$customAuthResul = this.customAuthResult) === null || _this$customAuthResul === void 0 ? void 0 : _this$customAuthResul.privateKey;

    if (!finalPrivKey && params) {
      var _this$loginSettings, _this$loginSettings$l, _this$loginSettings2, _this$loginSettings2$, _this$adapterSettings, _this$adapterSettings2;

      if (!((_this$loginSettings = this.loginSettings) !== null && _this$loginSettings !== void 0 && (_this$loginSettings$l = _this$loginSettings.loginProviderConfig) !== null && _this$loginSettings$l !== void 0 && _this$loginSettings$l[params.loginProvider])) {
        throw new Error("Login provider ".concat(params.loginProvider, " settings not found in loginSettings"));
      }

      const loginConfig = (_this$loginSettings2 = this.loginSettings) === null || _this$loginSettings2 === void 0 ? void 0 : (_this$loginSettings2$ = _this$loginSettings2.loginProviderConfig) === null || _this$loginSettings2$ === void 0 ? void 0 : _this$loginSettings2$[params.loginProvider];
      let result;

      if (loginConfig.method === customauth_["TORUS_METHOD"].TRIGGER_LOGIN) {
        result = await this.customAuthInstance.triggerLogin(loginConfig.args);
      } else if (loginConfig.method === customauth_["TORUS_METHOD"].TRIGGER_AGGREGATE_LOGIN) {
        result = await this.customAuthInstance.triggerAggregateLogin(loginConfig.args);
      } else if (loginConfig.method === customauth_["TORUS_METHOD"].TRIGGER_AGGREGATE_HYBRID_LOGIN) {
        result = await this.customAuthInstance.triggerHybridAggregateLogin(loginConfig.args);
      } else {
        throw base_["WalletLoginError"].connectionError("Unsupported CustomAuth method type: ".concat(loginConfig.method));
      }

      if (((_this$adapterSettings = this.adapterSettings) === null || _this$adapterSettings === void 0 ? void 0 : _this$adapterSettings.uxMode) === customauth_["UX_MODE"].POPUP) {
        const parsedResult = parseCustomAuthResult({
          method: loginConfig.method,
          result,
          state: {},
          args: loginConfig.args
        });

        this._syncCustomAuthResult(parsedResult);

        finalPrivKey = parsedResult.privateKey;
      } else if (((_this$adapterSettings2 = this.adapterSettings) === null || _this$adapterSettings2 === void 0 ? void 0 : _this$adapterSettings2.uxMode) === customauth_["UX_MODE"].REDIRECT) {
        return;
      }
    }

    external_loglevel_default.a.debug("final private key", finalPrivKey);

    if (finalPrivKey) {
      if (this.currentChainNamespace === base_["CHAIN_NAMESPACES"].SOLANA) {
        const {
          getED25519Key
        } = await Promise.resolve(/* import() */).then(__webpack_require__.t.bind(null, 7, 7));
        finalPrivKey = getED25519Key(finalPrivKey).sk.toString("hex");
      }

      await this.privKeyProvider.setupProvider(finalPrivKey);
      this.status = base_["ADAPTER_STATUS"].CONNECTED;
      this.emit(base_["ADAPTER_EVENTS"].CONNECTED, {
        adapter: base_["WALLET_ADAPTERS"].CUSTOM_AUTH,
        reconnected: this.rehydrated
      });
    } else {
      throw base_["WalletLoginError"].connectionError("Failed to login with CustomAuth");
    }
  }

  _syncCustomAuthResult(result) {
    if (result) {
      Object.keys(result).forEach(key => {
        if (typeof result[key] === "string") {
          this.store.set(key, result[key]);
        }
      });
      this.customAuthResult = customAuthAdapter_objectSpread(customAuthAdapter_objectSpread({}, this.customAuthResult), result);
    }
  }

}
// CONCATENATED MODULE: ./src/interface.ts

// CONCATENATED MODULE: ./src/index.ts




/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("@web3auth/solana-provider");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("@web3auth/ethereum-provider");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("@toruslabs/openlogin-ed25519");

/***/ })
/******/ ]);
//# sourceMappingURL=customauthAdapter.cjs.js.map