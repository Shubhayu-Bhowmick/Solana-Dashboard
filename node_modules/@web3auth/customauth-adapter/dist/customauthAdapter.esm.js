import { getChainConfig, BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, CHAIN_NAMESPACES, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, WalletLoginError } from '@web3auth/base';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import CustomAuth, { storageAvailable, TORUS_METHOD, LOGIN, UX_MODE } from '@toruslabs/customauth';
import log from 'loglevel';

const getCustomAuthDefaultOptions = (chainNamespace, chainId) => {
  return {
    adapterSettings: {
      baseUrl: "",
      redirectPathName: "",
      uxMode: "redirect",
      enableLogging: true,
      network: "mainnet"
    },
    initSettings: {
      skipInit: true,
      skipSw: true,
      skipPrefetch: true
    },
    chainConfig: chainNamespace && chainId ? getChainConfig(chainNamespace, chainId) : undefined
  };
};

const storeKey = "customauth-web3auth";

class MemoryStore {
  constructor() {
    _defineProperty(this, "store", {});
  }

  getItem(key) {
    return this.store[key];
  }

  setItem(key, value) {
    this.store[key] = value;
  }

}

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function parseCustomAuthResult(redirectResult) {
  var _privateKey;

  const {
    result,
    method
  } = redirectResult;
  let userInfo;
  let publicAddress;
  let privateKey;
  let pubKey;

  if (method === TORUS_METHOD.TRIGGER_LOGIN) {
    ({
      userInfo,
      publicAddress,
      privateKey,
      pubKey
    } = result);
  } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {
    const {
      userInfo: aggregateUserInfo
    } = result;
    ({
      publicAddress,
      privateKey,
      pubKey
    } = result);
    [userInfo] = aggregateUserInfo;
  } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN) {
    const {
      singleLogin,
      aggregateLogins
    } = result;
    ({
      userInfo
    } = singleLogin);
    [{
      publicAddress,
      privateKey,
      pubKey
    }] = aggregateLogins;
  } else {
    throw new Error("Unsupported method type");
  }

  return _objectSpread$1(_objectSpread$1({
    publicAddress,
    privateKey: ((_privateKey = privateKey) === null || _privateKey === void 0 ? void 0 : _privateKey.padStart(64, "0")) || ""
  }, userInfo), {}, {
    pubKey
  });
}
const sessionStorageAvailable = storageAvailable("sessionStorage");

class CustomAuthStore {
  // eslint-disable-next-line no-use-before-define
  constructor(storage) {
    _defineProperty(this, "storage", void 0);

    this.storage = storage;

    try {
      if (!storage.getItem(storeKey)) {
        this.resetStore();
      }
    } catch (error) {// Storage is not available
    }
  }

  static getInstance() {
    if (!this.instance) {
      this.instance = new this(sessionStorageAvailable ? window.sessionStorage : new MemoryStore());
    }

    return this.instance;
  }

  toJSON() {
    return this.storage.getItem(storeKey);
  }

  resetStore() {
    const currStore = this.getStore();
    this.storage.setItem(storeKey, JSON.stringify({}));
    return currStore;
  }

  getStore() {
    return JSON.parse(this.storage.getItem(storeKey) || "{}");
  }

  get(key) {
    const store = JSON.parse(this.storage.getItem(storeKey) || "{}");
    return store[key];
  }

  set(key, value) {
    const store = JSON.parse(this.storage.getItem(storeKey) || "{}");
    store[key] = value;
    this.storage.setItem(storeKey, JSON.stringify(store));
  }

}

_defineProperty(CustomAuthStore, "instance", void 0);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
const DEFAULT_CUSTOM_AUTH_RES = {
  publicAddress: "",
  privateKey: "",
  email: "",
  name: "",
  profileImage: "",
  aggregateVerifier: "",
  verifier: "",
  verifierId: "",
  typeOfLogin: LOGIN.GOOGLE
};
class CustomAuthAdapter extends BaseAdapter {
  // should be overridden in constructor or from setChainConfig function
  // before calling init function.
  constructor(params) {
    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;

    super();

    _defineProperty(this, "name", WALLET_ADAPTERS.CUSTOM_AUTH);

    _defineProperty(this, "adapterNamespace", ADAPTER_NAMESPACES.MULTICHAIN);

    _defineProperty(this, "type", ADAPTER_CATEGORY.IN_APP);

    _defineProperty(this, "currentChainNamespace", CHAIN_NAMESPACES.EIP155);

    _defineProperty(this, "customAuthInstance", null);

    _defineProperty(this, "status", ADAPTER_STATUS.NOT_READY);

    _defineProperty(this, "loginSettings", void 0);

    _defineProperty(this, "adapterSettings", null);

    _defineProperty(this, "initSettings", void 0);

    _defineProperty(this, "privKeyProvider", null);

    _defineProperty(this, "store", void 0);

    _defineProperty(this, "customAuthResult", _objectSpread({}, DEFAULT_CUSTOM_AUTH_RES));

    _defineProperty(this, "rehydrated", false);

    if (!params.loginSettings) {
      throw WalletInitializationError.invalidParams("loginSettings is required for customAuth adapter");
    }

    const defaultOptions = getCustomAuthDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);

    const adapterSettings = _objectSpread(_objectSpread({}, defaultOptions.adapterSettings), params.adapterSettings);

    const loginSettings = _objectSpread({}, params.loginSettings);

    const initSettings = _objectSpread(_objectSpread({}, defaultOptions.initSettings), params.initSettings);

    if (!adapterSettings.baseUrl) {
      throw WalletInitializationError.invalidParams("baseUrl is required in adapter settings");
    }

    if (!adapterSettings.redirectPathName) {
      throw WalletInitializationError.invalidParams("redirectPathName is required in adapter settings");
    }

    this.adapterSettings = adapterSettings;
    this.loginSettings = loginSettings;
    this.initSettings = initSettings; // if no chainNamespace is passed then chain config should be set before calling init

    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {
      var _params$chainConfig4;

      this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;
      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};
      this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);

      if (!this.chainConfig.rpcTarget) {
        throw WalletInitializationError.invalidParams("rpcTarget is required in chainConfig");
      }
    } // syncing storage with custom auth result.


    this.store = CustomAuthStore.getInstance();
    this.customAuthResult = _objectSpread(_objectSpread({}, this.customAuthResult), this.store.getStore());
  }

  get provider() {
    var _this$privKeyProvider;

    return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;
  } // should be called only before initialization.


  setChainConfig(customChainConfig) {
    super.setChainConfig(customChainConfig);
    this.currentChainNamespace = customChainConfig.chainNamespace;
  } // should be called only before initialization.


  setAdapterSettings(adapterSettings) {
    if (this.status === ADAPTER_STATUS.READY) return;
    const defaultOptions = getCustomAuthDefaultOptions();
    this.adapterSettings = _objectSpread(_objectSpread({}, defaultOptions.adapterSettings), adapterSettings);
  }

  async init(options) {
    super.checkInitializationRequirements();
    if (!this.adapterSettings) throw WalletInitializationError.invalidParams("adapterSettings is required for customAuth adapter");
    if (!this.chainConfig) throw WalletInitializationError.invalidParams("chainConfig is required for customAuth adapter");
    this.customAuthInstance = new CustomAuth(this.adapterSettings);
    await this.customAuthInstance.init(this.initSettings);
    this.status = ADAPTER_STATUS.READY;
    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.CUSTOM_AUTH);

    try {
      if (options.autoConnect) this.rehydrated = true; // if adapter is already connected and cached then we can proceed to setup the provider

      if (this.customAuthResult.privateKey && options.autoConnect) {
        await this.setupProvider();
      } // if adapter is not connected then we should check if url contains redirect login result


      if (!this.customAuthResult.privateKey && (await this.isRedirectResultAvailable())) {
        await this.setupProvider();
      }
    } catch (error) {
      log.error("Failed to parse direct auth result", error);
      this.emit("ERRORED", error);
    }
  }

  async connect(params) {
    super.checkConnectionRequirements();
    this.status = ADAPTER_STATUS.CONNECTING;
    this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {
      adapter: WALLET_ADAPTERS.CUSTOM_AUTH
    }));

    try {
      await this.setupProvider(params);
      return this.provider;
    } catch (error) {
      // ready again to be connected
      this.status = ADAPTER_STATUS.READY;
      this.emit(ADAPTER_EVENTS.ERRORED, error);
      log.error("Error while connecting to custom auth", error);
      throw WalletLoginError.connectionError("Failed to login with CustomAuth");
    }
  }

  async disconnect() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      cleanup: false
    };
    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError("Not connected with wallet");
    this.store.resetStore();

    if (options.cleanup) {
      this.status = ADAPTER_STATUS.NOT_READY;
      this.customAuthInstance = null;
      this.privKeyProvider = null;
    } else {
      // ready to be connected again
      this.status = ADAPTER_STATUS.READY;
    }

    this.customAuthResult = _objectSpread({}, DEFAULT_CUSTOM_AUTH_RES);
    this.rehydrated = false;
    this.emit(ADAPTER_EVENTS.DISCONNECTED);
  }

  async getUserInfo() {
    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError("Not connected with wallet");
    return {
      email: this.customAuthResult.email,
      name: this.customAuthResult.name,
      profileImage: this.customAuthResult.profileImage,
      verifier: this.customAuthResult.verifier,
      verifierId: this.customAuthResult.verifierId
    };
  }

  async isRedirectResultAvailable() {
    const url = new URL(window.location.href);
    const hash = url.hash.substring(1);
    const queryParams = {};
    url.searchParams.forEach((value, key) => {
      queryParams[key] = value;
    });

    if (!hash && Object.keys(queryParams).length === 0) {
      return false;
    }

    if (!this.customAuthInstance) throw WalletInitializationError.notReady("customAuthInstance is not ready");
    const redirectResult = await this.customAuthInstance.getRedirectResult({
      replaceUrl: true,
      clearLoginDetails: true
    });

    if (redirectResult.error) {
      log.error("Failed to parse custom auth result", redirectResult.error);

      if (redirectResult.error !== "Unsupported method type") {
        throw WalletLoginError.connectionError(redirectResult.error);
      }

      return false;
    }

    this.customAuthResult = parseCustomAuthResult(redirectResult);

    this._syncCustomAuthResult(this.customAuthResult);

    return !!this.customAuthResult.privateKey;
  }

  async setupProvider(params) {
    var _this$customAuthResul;

    if (!this.chainConfig) throw WalletInitializationError.invalidParams("chainConfig is required for customAuth adapter");

    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {
      const {
        SolanaPrivateKeyProvider
      } = await import('@web3auth/solana-provider');
      this.privKeyProvider = new SolanaPrivateKeyProvider({
        config: {
          chainConfig: this.chainConfig
        }
      });
    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {
      const {
        EthereumPrivateKeyProvider
      } = await import('@web3auth/ethereum-provider');
      this.privKeyProvider = new EthereumPrivateKeyProvider({
        config: {
          chainConfig: this.chainConfig
        }
      });
    } else {
      throw new Error("Invalid chainNamespace: ".concat(this.currentChainNamespace, " found while connecting to wallet"));
    }

    if (!this.customAuthInstance) throw WalletInitializationError.notReady("customAuthInstance is not ready");
    let finalPrivKey = (_this$customAuthResul = this.customAuthResult) === null || _this$customAuthResul === void 0 ? void 0 : _this$customAuthResul.privateKey;

    if (!finalPrivKey && params) {
      var _this$loginSettings, _this$loginSettings$l, _this$loginSettings2, _this$loginSettings2$, _this$adapterSettings, _this$adapterSettings2;

      if (!((_this$loginSettings = this.loginSettings) !== null && _this$loginSettings !== void 0 && (_this$loginSettings$l = _this$loginSettings.loginProviderConfig) !== null && _this$loginSettings$l !== void 0 && _this$loginSettings$l[params.loginProvider])) {
        throw new Error("Login provider ".concat(params.loginProvider, " settings not found in loginSettings"));
      }

      const loginConfig = (_this$loginSettings2 = this.loginSettings) === null || _this$loginSettings2 === void 0 ? void 0 : (_this$loginSettings2$ = _this$loginSettings2.loginProviderConfig) === null || _this$loginSettings2$ === void 0 ? void 0 : _this$loginSettings2$[params.loginProvider];
      let result;

      if (loginConfig.method === TORUS_METHOD.TRIGGER_LOGIN) {
        result = await this.customAuthInstance.triggerLogin(loginConfig.args);
      } else if (loginConfig.method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {
        result = await this.customAuthInstance.triggerAggregateLogin(loginConfig.args);
      } else if (loginConfig.method === TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN) {
        result = await this.customAuthInstance.triggerHybridAggregateLogin(loginConfig.args);
      } else {
        throw WalletLoginError.connectionError("Unsupported CustomAuth method type: ".concat(loginConfig.method));
      }

      if (((_this$adapterSettings = this.adapterSettings) === null || _this$adapterSettings === void 0 ? void 0 : _this$adapterSettings.uxMode) === UX_MODE.POPUP) {
        const parsedResult = parseCustomAuthResult({
          method: loginConfig.method,
          result,
          state: {},
          args: loginConfig.args
        });

        this._syncCustomAuthResult(parsedResult);

        finalPrivKey = parsedResult.privateKey;
      } else if (((_this$adapterSettings2 = this.adapterSettings) === null || _this$adapterSettings2 === void 0 ? void 0 : _this$adapterSettings2.uxMode) === UX_MODE.REDIRECT) {
        return;
      }
    }

    log.debug("final private key", finalPrivKey);

    if (finalPrivKey) {
      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {
        const {
          getED25519Key
        } = await import('@toruslabs/openlogin-ed25519');
        finalPrivKey = getED25519Key(finalPrivKey).sk.toString("hex");
      }

      await this.privKeyProvider.setupProvider(finalPrivKey);
      this.status = ADAPTER_STATUS.CONNECTED;
      this.emit(ADAPTER_EVENTS.CONNECTED, {
        adapter: WALLET_ADAPTERS.CUSTOM_AUTH,
        reconnected: this.rehydrated
      });
    } else {
      throw WalletLoginError.connectionError("Failed to login with CustomAuth");
    }
  }

  _syncCustomAuthResult(result) {
    if (result) {
      Object.keys(result).forEach(key => {
        if (typeof result[key] === "string") {
          this.store.set(key, result[key]);
        }
      });
      this.customAuthResult = _objectSpread(_objectSpread({}, this.customAuthResult), result);
    }
  }

}

export { CustomAuthAdapter, getCustomAuthDefaultOptions };
//# sourceMappingURL=customauthAdapter.esm.js.map
