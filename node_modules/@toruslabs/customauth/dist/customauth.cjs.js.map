{"version":3,"sources":["webpack://Customauth/webpack/bootstrap","webpack://Customauth/external \"@babel/runtime/helpers/defineProperty\"","webpack://Customauth/external \"@toruslabs/http-helpers\"","webpack://Customauth/external \"lodash.merge\"","webpack://Customauth/external \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://Customauth/external \"loglevel\"","webpack://Customauth/external \"jwt-decode\"","webpack://Customauth/external \"@toruslabs/fetch-node-details\"","webpack://Customauth/external \"broadcast-channel\"","webpack://Customauth/external \"web3-utils\"","webpack://Customauth/external \"@toruslabs/torus.js\"","webpack://Customauth/external \"events\"","webpack://Customauth/external \"@chaitanyapotti/register-service-worker\"","webpack://Customauth/./src/utils/enums.ts","webpack://Customauth/./src/utils/loglevel.ts","webpack://Customauth/./src/utils/helpers.ts","webpack://Customauth/./src/utils/PopupHandler.ts","webpack://Customauth/./src/handlers/AbstractLoginHandler.ts","webpack://Customauth/./src/handlers/DiscordHandler.ts","webpack://Customauth/./src/handlers/FacebookHandler.ts","webpack://Customauth/./src/handlers/GoogleHandler.ts","webpack://Customauth/./src/handlers/JwtHandler.ts","webpack://Customauth/./src/handlers/MockLoginHandler.ts","webpack://Customauth/./src/handlers/PasswordlessHandler.ts","webpack://Customauth/./src/handlers/RedditHandler.ts","webpack://Customauth/./src/handlers/TwitchHandler.ts","webpack://Customauth/./src/handlers/WebAuthnHandler.ts","webpack://Customauth/./src/handlers/HandlerFactory.ts","webpack://Customauth/./src/registerServiceWorker.ts","webpack://Customauth/./src/login.ts","webpack://Customauth/./src/index.ts"],"names":["TORUS_NETWORK","TESTNET","MAINNET","CYAN","LOGIN","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","GITHUB","LINKEDIN","TWITTER","WEIBO","LINE","EMAIL_PASSWORD","PASSWORDLESS","JWT","WEBAUTHN","AGGREGATE_VERIFIER","SINGLE_VERIFIER_ID","UX_MODE","POPUP","REDIRECT","REDIRECT_PARAMS_STORAGE_METHOD","LOCAL_STORAGE","SESSION_STORAGE","TORUS_METHOD","TRIGGER_LOGIN","TRIGGER_AGGREGATE_LOGIN","TRIGGER_AGGREGATE_HYBRID_LOGIN","CONTRACT_MAP","NETWORK_MAP","ETHEREUM_NETWORK","ROPSTEN","POLYGON","SIGNER_MAP","loglevel","getLogger","eventToPromise","emitter","Promise","resolve","reject","handler","ev","error","data","removeEventListener","Error","addEventListener","loginToConnectionMap","padUrlString","url","href","endsWith","randomId","Math","random","toString","slice","broadcastChannelOptions","webWorkerSupport","caseSensitiveField","field","isCaseSensitive","toLowerCase","getVerifierId","userInfo","typeOfLogin","verifierIdField","isVerifierIdCaseSensitive","name","sub","handleRedirectParameters","hash","queryParameters","hashParameters","split","reduce","result","item","part0","part1","log","info","instanceParameters","Object","keys","length","state","JSON","parse","atob","decodeURIComponent","error_description","storageAvailable","type","storage","window","x","setItem","removeItem","e","code","storageStatus","storeLoginDetails","params","storageMethod","scope","stringify","retrieveLoginDetails","loginDetails","getItem","clearLoginDetailsStorage","clearOrphanedLoginDetails","allStorageKeys","forEach","key","startsWith","getPopupFeatures","dualScreenLeft","screenLeft","undefined","screenX","dualScreenTop","screenTop","screenY","w","h","width","innerWidth","document","documentElement","clientWidth","screen","height","innerHeight","clientHeight","systemZoom","left","abs","top","features","isFirefox","navigator","userAgent","indexOf","constructURL","baseURL","query","URL","searchParams","append","PopupHandler","EventEmitter","constructor","target","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","emit","open","focus","close","redirect","locationReplaceOnRedirect","location","replace","AbstractLoginHandler","clientId","verifier","redirect_uri","uxMode","redirectToOpener","jwtParams","customState","encodeURIComponent","btoa","instanceId","nonce","handleLoginWindow","verifierWindow","finalURL","popupFeatures","bc","handleData","instanceParams","hashParams","access_token","accessToken","id_token","idToken","rest","postMessage","success","BroadcastChannel","postMessageEventHandler","postMessageEvent","channel","once","DiscordHandler","setFinalUrl","finalUrl","clonedParams","finalJwtParams","deepmerge","response_type","RESPONSE_TYPE","client_id","SCOPE","getUserInfo","get","headers","Authorization","id","avatar","email","username","discriminator","profileImage","verifierId","FacebookHandler","picture","GoogleHandler","prompt","PROMPT","JwtHandler","domain","pathname","connection","user_info_route","domainUrl","warn","decodedToken","jwtDecode","MockLoginHandler","login_hint","phone_number","send","authParams","post","then","response","catch","RedditHandler","icon_img","TwitchHandler","force_verify","profile_image_url","display_name","WEBAUTHN_LOOKUP_SERVER","WebAuthnHandler","registerOnly","register_only","parameters","ref","extraParamsPassed","extraParams","signature","clientDataJSON","authenticatorData","publicKey","challenge","rpOrigin","credId","debug","verifier_id","extraVerifierParams","createHandler","PasswordlessHandler","registerServiceWorker","baseUrl","swUrl","register","ready","registered","cached","updatefound","updated","offline","CustomAuth","network","proxyContractAddress","enableLogging","enableOneKey","redirectPathName","apiKey","redirectParamsStorageMethod","metadataUrl","isInitialized","baseUri","config","torus","Torus","metadataHost","allowHost","signerHost","setAPIKey","ethNetwork","nodeDetailManager","NodeDetailManager","proxyAddress","enableAll","disableAll","init","skipSw","skipInit","skipPrefetch","fetchSwResponse","fetch","cache","ok","handlePrefetchRedirectUri","triggerLogin","args","loginHandler","loginParams","method","torusNodeEndpoints","torusNodePub","getNodeDetails","torusPubKey","getPublicAddress","res","torusKey","typeOfUser","pubKey","pub_key_X","X","pub_key_Y","Y","publicAddress","address","privateKey","metadataNonce","getTorusKey","triggerAggregateLogin","aggregateVerifierType","verifierIdentifier","subVerifierDetailsArray","Array","isArray","userInfoPromises","loginParamsArray","subVerifierDetail","push","_userInfoArray","all","userInfoArray","map","aggregateVerifier","aggregateVerifierParams","verify_params","sub_verifier_ids","aggregateIdTokenSeeds","aggregateVerifierId","index","idtoken","sort","aggregateIdToken","keccak256","join","String","fromCharCode","triggerHybridAggregateLogin","singleLogin","aggregateLoginParams","torusKey1Promise","torusKey2Promise","torusKey1","torusKey2","aggregateLogins","verifierParams","additionalParams","torusIndexes","shares","retrieveShares","ethAddress","privKey","getAggregateTorusKey","subVerifierInfoArray","getPostboxKeyFrom1OutOf1","getRedirectResult","replaceUrl","clearLoginDetails","substring","queryParams","value","cleanUrl","origin","history","replaceState","methodArgs","err","message","redirectHtml","createElement","crossOrigin","rel","resolveFn","relList","supports","onload","onerror","head","appendChild"],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,kE;;;;;;ACAA,oD;;;;;;ACAA,yC;;;;;;ACAA,2E;;;;;;ACAA,qC;;;;;;ACAA,uC;;;;;;ACAA,0D;;;;;;ACAA,8C;;;;;;ACAA,uC;;;;;;ACAA,gD;;;;;;ACAA,mC;;;;;;ACAA,oE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEO,MAAMA,aAAa,GAAG;AAC3BC,SAAO,EAAE,SADkB;AAE3BC,SAAO,EAAE,SAFkB;AAG3BC,MAAI,EAAE;AAHqB,CAAtB;AAMA,MAAMC,KAAK,GAAG;AACnBC,QAAM,EAAE,QADW;AAEnBC,UAAQ,EAAE,UAFS;AAGnBC,QAAM,EAAE,QAHW;AAInBC,SAAO,EAAE,SAJU;AAKnBC,QAAM,EAAE,QALW;AAMnBC,OAAK,EAAE,OANY;AAOnBC,QAAM,EAAE,QAPW;AAQnBC,UAAQ,EAAE,UARS;AASnBC,SAAO,EAAE,SATU;AAUnBC,OAAK,EAAE,OAVY;AAWnBC,MAAI,EAAE,MAXa;AAYnBC,gBAAc,EAAE,gBAZG;AAanBC,cAAY,EAAE,cAbK;AAcnBC,KAAG,EAAE,KAdc;AAenBC,UAAQ,EAAE;AAfS,CAAd;AAkBA,MAAMC,kBAAkB,GAAG;AAChCC,oBAAkB,EAAE,oBADY,CAEhC;AACA;;AAHgC,CAA3B;AAMA,MAAMC,OAAO,GAAG;AACrBC,OAAK,EAAE,OADc;AAErBC,UAAQ,EAAE;AAFW,CAAhB;AAKA,MAAMC,8BAA8B,GAAG;AAC5CC,eAAa,EAAE,cAD6B;AAE5CC,iBAAe,EAAE;AAF2B,CAAvC;AAKA,MAAMC,YAAY,GAAG;AAC1BC,eAAa,EAAE,cADW;AAE1BC,yBAAuB,EAAE,uBAFC;AAG1BC,gCAA8B,EAAE;AAHN,CAArB;AAaA,MAAMC,YAAY,GAAG;AAC1B,GAAChC,aAAa,CAACE,OAAf,GAAyB,4CADC;AAE1B,GAACF,aAAa,CAACC,OAAf,GAAyB,4CAFC;AAG1B,GAACD,aAAa,CAACG,IAAf,GAAsB;AAHI,CAArB;AAMA,MAAM8B,WAAW,GAAG;AACzB,GAACjC,aAAa,CAACE,OAAf,GAAyBgC,uCAAgB,CAAChC,OADjB;AAEzB,GAACF,aAAa,CAACC,OAAf,GAAyBiC,uCAAgB,CAACC,OAFjB;AAGzB,GAACnC,aAAa,CAACG,IAAf,GAAsB+B,uCAAgB,CAACE;AAHd,CAApB;AAMA,MAAMC,UAAU,GAAG;AACxB,GAACrC,aAAa,CAACE,OAAf,GAAyB,uBADD;AAExB,GAACF,aAAa,CAACC,OAAf,GAAyB,uBAFD;AAGxB,GAACD,aAAa,CAACG,IAAf,GAAsB;AAHE,CAAnB,C;;;;;;;;;;;;;;;;;;;;;;;;ACnEP;AAEemC,wEAAQ,CAACC,SAAT,CAAmB,YAAnB,CAAf,E;;ACDA;AACA;AAYO,SAASC,cAAT,CAA2BC,OAA3B,EAA6D;AAClE,SAAO,IAAIC,OAAJ,CAAe,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACzC,UAAMC,OAAO,GAAIC,EAAD,IAA4B;AAC1C,YAAM;AAAEC,aAAK,GAAG,EAAV;AAAcC;AAAd,UAAuBF,EAA7B;AACAL,aAAO,CAACQ,mBAAR,CAA4B,SAA5B,EAAuCJ,OAAvC;AACA,UAAIE,KAAJ,EAAW,OAAOH,MAAM,CAAC,IAAIM,KAAJ,CAAUH,KAAV,CAAD,CAAb;AACX,aAAOJ,OAAO,CAACK,IAAD,CAAd;AACD,KALD;;AAMAP,WAAO,CAACU,gBAAR,CAAyB,SAAzB,EAAoCN,OAApC;AACD,GARM,CAAP;AASD,C,CAED;;AACO,MAAMO,oBAAoB,GAAG;AAClC,GAAChD,KAAK,CAACM,KAAP,GAAe,OADmB;AAElC,GAACN,KAAK,CAACO,MAAP,GAAgB,QAFkB;AAGlC,GAACP,KAAK,CAACQ,QAAP,GAAkB,UAHgB;AAIlC,GAACR,KAAK,CAACS,OAAP,GAAiB,SAJiB;AAKlC,GAACT,KAAK,CAACU,KAAP,GAAe,OALmB;AAMlC,GAACV,KAAK,CAACW,IAAP,GAAc,MANoB;AAOlC,GAACX,KAAK,CAACY,cAAP,GAAwB,kCAPU;AAQlC,GAACZ,KAAK,CAACa,YAAP,GAAsB;AARY,CAA7B;AAWA,MAAMoC,YAAY,GAAIC,GAAD,IAAuBA,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkB,GAAlB,IAAyBF,GAAG,CAACC,IAA7B,aAAuCD,GAAG,CAACC,IAA3C,MAA5C;AAEP;AACA;AACA;AACA;;AACO,MAAME,QAAQ,GAAG,MAAcC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,CAA/B;AAEA,MAAMC,uBAAuB,GAAG;AACrC;AACAC,kBAAgB,EAAE,KAFmB,CAEZ;;AAFY,CAAhC;;AAKP,SAASC,kBAAT,CAA4BC,KAA5B,EAA2CC,eAA3C,EAA8E;AAC5E,SAAOA,eAAe,GAAGD,KAAH,GAAWA,KAAK,CAACE,WAAN,EAAjC;AACD;;AAEM,MAAMC,aAAa,GAAG,UAC3BC,QAD2B,EAE3BC,WAF2B,EAG3BC,eAH2B,EAKhB;AAAA,MADXC,yBACW,uEADiB,IACjB;AACX,QAAM;AAAEC,QAAF;AAAQC;AAAR,MAAgBL,QAAtB;AACA,MAAIE,eAAJ,EAAqB,OAAOP,kBAAkB,CAACK,QAAQ,CAACE,eAAD,CAAT,EAA4BC,yBAA5B,CAAzB;;AACrB,UAAQF,WAAR;AACE,SAAKlE,KAAK,CAACa,YAAX;AACA,SAAKb,KAAK,CAACY,cAAX;AACE,aAAOgD,kBAAkB,CAACS,IAAD,EAAOD,yBAAP,CAAzB;;AACF,SAAKpE,KAAK,CAACU,KAAX;AACA,SAAKV,KAAK,CAACO,MAAX;AACA,SAAKP,KAAK,CAACS,OAAX;AACA,SAAKT,KAAK,CAACM,KAAX;AACA,SAAKN,KAAK,CAACQ,QAAX;AACA,SAAKR,KAAK,CAACW,IAAX;AACA,SAAKX,KAAK,CAACc,GAAX;AACE,aAAO8C,kBAAkB,CAACU,GAAD,EAAMF,yBAAN,CAAzB;;AACF;AACE,YAAM,IAAItB,KAAJ,CAAU,oBAAV,CAAN;AAbJ;AAeD,CAvBM;AAyBA,MAAMyB,wBAAwB,GAAG,CACtCC,IADsC,EAEtCC,eAFsC,KAG4D;AAClG,QAAMC,cAAkC,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuB,CAACC,MAAD,EAASC,IAAT,KAAkB;AAClF,UAAM,CAACC,KAAD,EAAQC,KAAR,IAAiBF,IAAI,CAACH,KAAL,CAAW,GAAX,CAAvB;AACAE,UAAM,CAACE,KAAD,CAAN,GAAgBC,KAAhB;AACA,WAAOH,MAAP;AACD,GAJ0C,EAIxC,EAJwC,CAA3C;AAKAI,UAAG,CAACC,IAAJ,CAASR,cAAT,EAAyBD,eAAzB;AACA,MAAIU,kBAAsC,GAAG,EAA7C;AACA,MAAIxC,KAAK,GAAG,EAAZ;;AACA,MAAIyC,MAAM,CAACC,IAAP,CAAYX,cAAZ,EAA4BY,MAA5B,GAAqC,CAArC,IAA0CZ,cAAc,CAACa,KAA7D,EAAoE;AAClEJ,sBAAkB,GAAGK,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,kBAAkB,CAACA,kBAAkB,CAACjB,cAAc,CAACa,KAAhB,CAAnB,CAAnB,CAAf,KAAkF,EAAvG;AACA5C,SAAK,GAAG+B,cAAc,CAACkB,iBAAf,IAAoClB,cAAc,CAAC/B,KAAnD,IAA4DA,KAApE;AACD,GAHD,MAGO,IAAIyC,MAAM,CAACC,IAAP,CAAYZ,eAAZ,EAA6Ba,MAA7B,GAAsC,CAAtC,IAA2Cb,eAAe,CAACc,KAA/D,EAAsE;AAC3EJ,sBAAkB,GAAGK,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,kBAAkB,CAACA,kBAAkB,CAAClB,eAAe,CAACc,KAAjB,CAAnB,CAAnB,CAAf,KAAmF,EAAxG;AACA,QAAId,eAAe,CAAC9B,KAApB,EAA2BA,KAAK,GAAG8B,eAAe,CAAC9B,KAAxB;AAC5B;;AACD,SAAO;AAAEA,SAAF;AAASwC,sBAAT;AAA6BT;AAA7B,GAAP;AACD,CApBM;AAsBA,SAASmB,gBAAT,CAA0BC,IAA1B,EAA8E;AACnF,MAAIC,OAAJ;;AACA,MAAI;AACFA,WAAO,GAAGC,MAAM,CAACF,IAAD,CAAhB;AACA,UAAMG,CAAC,GAAG,kBAAV;AACAF,WAAO,CAACG,OAAR,CAAgBD,CAAhB,EAAmBA,CAAnB;AACAF,WAAO,CAACI,UAAR,CAAmBF,CAAnB;AACA,WAAO,IAAP;AACD,GAND,CAME,OAAOG,CAAP,EAAU;AACV,WACEA,CAAC,MACD;AACCA,KAAC,CAACC,IAAF,KAAW,EAAX,IACC;AACAD,KAAC,CAACC,IAAF,KAAW,IAFZ,IAGC;AACA;AACAD,KAAC,CAAC/B,IAAF,KAAW,oBALZ,IAMC;AACA+B,KAAC,CAAC/B,IAAF,KAAW,4BATZ,CAAD,IAUA;AACA0B,WAXA,IAYAA,OAAO,CAACT,MAAR,KAAmB,CAbrB;AAeD;AACF;AAED,MAAMgB,aAAa,GAAG;AACpB,GAACjF,8BAA8B,CAACC,aAAhC,GAAgDuE,gBAAgB,CAACxE,8BAA8B,CAACC,aAAhC,CAD5C;AAEpB,GAACD,8BAA8B,CAACE,eAAhC,GAAkDsE,gBAAgB,CAACxE,8BAA8B,CAACE,eAAhC;AAF9C,CAAtB;AAKO,SAASgF,iBAAT,CAA2BC,MAA3B,EAAiDC,aAAjD,EAAqGC,KAArG,EAA0H;AAC/H,MAAIJ,aAAa,CAACG,aAAD,CAAjB,EAAkC;AAChCT,UAAM,CAACS,aAAD,CAAN,CAAsBP,OAAtB,uBAA6CQ,KAA7C,GAAsDlB,IAAI,CAACmB,SAAL,CAAeH,MAAf,CAAtD;AACD;AACF;AAEM,SAASI,oBAAT,CAA8BH,aAA9B,EAAkFC,KAAlF,EAA+G;AACpH,MAAIJ,aAAa,CAACG,aAAD,CAAjB,EAAkC;AAChC,UAAMI,YAAY,GAAGb,MAAM,CAACS,aAAD,CAAN,CAAsBK,OAAtB,uBAA6CJ,KAA7C,EAArB;AACA,WAAOlB,IAAI,CAACC,KAAL,CAAWoB,YAAY,IAAI,IAA3B,CAAP;AACD;;AACD,QAAM,IAAI/D,KAAJ,CAAU,yCAAV,CAAN;AACD;AAEM,SAASiE,wBAAT,CAAkCN,aAAlC,EAAsFC,KAAtF,EAA2G;AAChH,MAAIJ,aAAa,CAACG,aAAD,CAAjB,EAAkC;AAChCT,UAAM,CAACS,aAAD,CAAN,CAAsBN,UAAtB,uBAAgDO,KAAhD;AACD;AACF;AAEM,SAASM,yBAAT,CAAmCP,aAAnC,EAA6F;AAClG,MAAIH,aAAa,CAACG,aAAD,CAAjB,EAAkC;AAChC,UAAMQ,cAAc,GAAG7B,MAAM,CAACC,IAAP,CAAYW,MAAM,CAACS,aAAD,CAAlB,CAAvB;AACAQ,kBAAc,CAACC,OAAf,CAAwBC,GAAD,IAAS;AAC9B,UAAIA,GAAG,CAACC,UAAJ,CAAe,cAAf,CAAJ,EAAoC;AAClCpB,cAAM,CAACS,aAAD,CAAN,CAAsBN,UAAtB,CAAiCgB,GAAjC;AACD;AACF,KAJD;AAKD;AACF;AAEM,SAASE,gBAAT,GAAoC;AACzC;AACA,QAAMC,cAAc,GAAGtB,MAAM,CAACuB,UAAP,KAAsBC,SAAtB,GAAkCxB,MAAM,CAACuB,UAAzC,GAAsDvB,MAAM,CAACyB,OAApF;AACA,QAAMC,aAAa,GAAG1B,MAAM,CAAC2B,SAAP,KAAqBH,SAArB,GAAiCxB,MAAM,CAAC2B,SAAxC,GAAoD3B,MAAM,CAAC4B,OAAjF;AAEA,QAAMC,CAAC,GAAG,IAAV;AACA,QAAMC,CAAC,GAAG,GAAV;AAEA,QAAMC,KAAK,GAAG/B,MAAM,CAACgC,UAAP,GACVhC,MAAM,CAACgC,UADG,GAEVC,QAAQ,CAACC,eAAT,CAAyBC,WAAzB,GACAF,QAAQ,CAACC,eAAT,CAAyBC,WADzB,GAEAnC,MAAM,CAACoC,MAAP,CAAcL,KAJlB;AAMA,QAAMM,MAAM,GAAGrC,MAAM,CAACsC,WAAP,GACXtC,MAAM,CAACsC,WADI,GAEXL,QAAQ,CAACC,eAAT,CAAyBK,YAAzB,GACAN,QAAQ,CAACC,eAAT,CAAyBK,YADzB,GAEAvC,MAAM,CAACoC,MAAP,CAAcC,MAJlB;AAMA,QAAMG,UAAU,GAAG,CAAnB,CApByC,CAoBnB;;AAEtB,QAAMC,IAAI,GAAGnF,IAAI,CAACoF,GAAL,CAAS,CAACX,KAAK,GAAGF,CAAT,IAAc,CAAd,GAAkBW,UAAlB,GAA+BlB,cAAxC,CAAb;AACA,QAAMqB,GAAG,GAAGrF,IAAI,CAACoF,GAAL,CAAS,CAACL,MAAM,GAAGP,CAAV,IAAe,CAAf,GAAmBU,UAAnB,GAAgCd,aAAzC,CAAZ;AACA,QAAMkB,QAAQ,uEAAgEd,CAAC,GAAGU,UAApE,oBAAwFX,CAAC,GAAGW,UAA5F,kBAA8GG,GAA9G,mBAA0HF,IAA1H,CAAd;AACA,SAAOG,QAAP;AACD;AAEM,MAAMC,SAAS,GAAG;AAAA;;AAAA,SAAe,YAAA7C,MAAM,UAAN,+DAAQ8C,SAAR,wEAAmBC,SAAnB,CAA6BhF,WAA7B,GAA2CiF,OAA3C,CAAmD,SAAnD,KAAgE,CAAC,CAAjE,IAAsE,KAArF;AAAA,CAAlB;AAEA,SAASC,YAAT,CAAsBzC,MAAtB,EAA4H;AACjI,QAAM;AAAE0C,WAAF;AAAWC,SAAX;AAAkB3E;AAAlB,MAA2BgC,MAAjC;AAEA,QAAMtD,GAAG,GAAG,IAAIkG,GAAJ,CAAQF,OAAR,CAAZ;;AACA,MAAIC,KAAJ,EAAW;AACT/D,UAAM,CAACC,IAAP,CAAY8D,KAAZ,EAAmBjC,OAAnB,CAA4BC,GAAD,IAAS;AAClCjE,SAAG,CAACmG,YAAJ,CAAiBC,MAAjB,CAAwBnC,GAAxB,EAA6BgC,KAAK,CAAChC,GAAD,CAAlC;AACD,KAFD;AAGD;;AACD,MAAI3C,IAAJ,EAAU;AACR,UAAMsD,CAAC,GAAG,IAAIsB,GAAJ,CAAQH,YAAY,CAAC;AAAEC,aAAF;AAAWC,WAAK,EAAE3E;AAAlB,KAAD,CAApB,EAAgD6E,YAAhD,CAA6D7F,QAA7D,EAAV;AACAN,OAAG,CAACsB,IAAJ,GAAWsD,CAAX;AACD;;AACD,SAAO5E,GAAG,CAACM,QAAJ,EAAP;AACD,C;;;;;;ACjND;AAEA;;AAEA,MAAM+F,yBAAN,SAA2BC,gCAA3B,CAAwC;AAatCC,aAAW,OAA8E;AAAA,QAA7E;AAAEvG,SAAF;AAAOwG,YAAP;AAAed;AAAf,KAA6E;AACvF;;AADuF;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAEvF,SAAK1F,GAAL,GAAWA,GAAX;AACA,SAAKwG,MAAL,GAAcA,MAAM,IAAI,QAAxB;AACA,SAAKd,QAAL,GAAgBA,QAAQ,IAAIvB,gBAAgB,EAA5C;AACA,SAAKrB,MAAL,GAAcwB,SAAd;AACA,SAAKmC,WAAL,GAAmBnC,SAAnB;AACA,SAAKoC,aAAL,GAAqB,KAArB;;AACA,SAAKC,WAAL;AACD;;AAEDA,aAAW,GAAS;AAClB,SAAKF,WAAL,GAAmBG,MAAM,CACvBC,WAAW,CAAC,MAAM;AAChB,UAAI,KAAK/D,MAAL,IAAe,KAAKA,MAAL,CAAYgE,MAA/B,EAAuC;AACrCC,qBAAa,CAAC,KAAKN,WAAN,CAAb;;AACA,YAAI,CAAC,KAAKC,aAAV,EAAyB;AACvB,eAAKM,IAAL,CAAU,OAAV;AACD;;AACD,aAAKN,aAAL,GAAqB,KAArB;AACA,aAAK5D,MAAL,GAAcwB,SAAd;AACD;;AACD,UAAI,KAAKxB,MAAL,KAAgBwB,SAApB,EAA+ByC,aAAa,CAAC,KAAKN,WAAN,CAAb;AAChC,KAVU,EAUR,GAVQ,CADY,CAAzB;AAaD;;AAEDQ,MAAI,GAAkB;AAAA;;AACpB,SAAKnE,MAAL,GAAcA,MAAM,CAACmE,IAAP,CAAY,KAAKjH,GAAL,CAASC,IAArB,EAA2B,KAAKuG,MAAhC,EAAwC,KAAKd,QAA7C,CAAd;AACA,wBAAI,KAAK5C,MAAT,yCAAI,aAAaoE,KAAjB,EAAwB,KAAKpE,MAAL,CAAYoE,KAAZ;AACxB,WAAO9H,OAAO,CAACC,OAAR,EAAP;AACD;;AAED8H,OAAK,GAAS;AACZ,SAAKT,aAAL,GAAqB,IAArB;AACA,QAAI,KAAK5D,MAAT,EAAiB,KAAKA,MAAL,CAAYqE,KAAZ;AAClB;;AAEDC,UAAQ,CAACC,yBAAD,EAA2C;AACjD,QAAIA,yBAAJ,EAA+B;AAC7BvE,YAAM,CAACwE,QAAP,CAAgBC,OAAhB,CAAwB,KAAKvH,GAAL,CAASC,IAAjC;AACD,KAFD,MAEO;AACL6C,YAAM,CAACwE,QAAP,CAAgBrH,IAAhB,GAAuB,KAAKD,GAAL,CAASC,IAAhC;AACD;AACF;;AAzDqC;;AA4DzBoG,gFAAf,E;;;;;;;;;;AChEA;AAEA;AACA;AACA;AACA;;AAGA,MAAemB,yCAAf,CAA6D;AAK3D;AACA;AACAjB,aAAW,CACAkB,QADA,EAEAC,QAFA,EAGAC,YAHA,EAIA3G,WAJA,EAKA4G,MALA,EAMAC,gBANA,EAOAC,SAPA,EAQAC,WARA,EAST;AAAA,SARSN,QAQT,GARSA,QAQT;AAAA,SAPSC,QAOT,GAPSA,QAOT;AAAA,SANSC,YAMT,GANSA,YAMT;AAAA,SALS3G,WAKT,GALSA,WAKT;AAAA,SAJS4G,MAIT,GAJSA,MAIT;AAAA,SAHSC,gBAGT,GAHSA,gBAGT;AAAA,SAFSC,SAET,GAFSA,SAET;AAAA,SADSC,WACT,GADSA,WACT;;AAAA,4CAfqB5H,QAAQ,EAe7B;;AAAA;AAAE;;AAEK,MAALkC,KAAK,GAAW;AAClB,WAAO2F,kBAAkB,CACvBlF,MAAM,CAACmF,IAAP,CACE3F,IAAI,CAACmB,SAAL,iCACM,KAAKsE,WAAL,IAAoB,EAD1B;AAEEG,gBAAU,EAAE,KAAKC,KAFnB;AAGET,cAAQ,EAAE,KAAKA,QAHjB;AAIE1G,iBAAW,EAAE,KAAKA,WAJpB;AAKE6G,sBAAgB,EAAE,KAAKA,gBAAL,IAAyB;AAL7C,OADF,CADuB,CAAzB;AAWD;;AAEDO,mBAAiB,CAAC9E,MAAD,EAAwG;AACvH,UAAM+E,cAAc,GAAG,IAAIhC,kBAAJ,CAAiB;AAAErG,SAAG,EAAE,KAAKsI,QAAZ;AAAsB5C,cAAQ,EAAEpC,MAAM,CAACiF;AAAvC,KAAjB,CAAvB;;AACA,QAAI,KAAKX,MAAL,KAAgB5J,OAAO,CAACE,QAA5B,EAAsC;AACpCmK,oBAAc,CAACjB,QAAf,CAAwB9D,MAAM,CAAC+D,yBAA/B;AACD,KAFD,MAEO;AACL,aAAO,IAAIjI,OAAJ,CAAiC,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC3D,YAAIkJ,EAAJ;;AACA,cAAMC,UAAU,GAAG,MAAOjJ,EAAP,IAAsD;AACvE,cAAI;AACF,kBAAM;AAAEC,mBAAF;AAASC;AAAT,gBAAkBF,EAAxB;;AACA,yBAGIE,IAAI,IAAI,EAHZ;AAAA,kBAAM;AACJgJ,4BADI;AAEJC,wBAAU,EAAE;AAAEC,4BAAY,EAAEC,WAAhB;AAA6BC,wBAAQ,EAAEC;AAAvC;AAFR,aAAN;AAAA,kBAEiEC,IAFjE,0CAEEL,UAFF;;AAIA,gBAAIlJ,KAAJ,EAAW;AACTsC,sBAAG,CAACtC,KAAJ,CAAUD,EAAV;AACAF,oBAAM,CAAC,IAAIM,KAAJ,kBAAoBH,KAApB,qBAAoC6C,IAAI,CAACmB,SAAL,CAAejE,EAAE,CAACE,IAAH,IAAW,EAA1B,CAApC,EAAD,CAAN;AACA;AACD;;AACD,gBAAIF,EAAE,CAACE,IAAH,IAAWgJ,cAAc,CAAChB,QAAf,KAA4B,KAAKA,QAAhD,EAA0D;AACxD3F,sBAAG,CAACC,IAAJ,CAASxC,EAAE,CAACE,IAAZ;AACA,kBAAI,CAAC,KAAKmI,gBAAN,IAA0BW,EAA9B,EAAkC,MAAMA,EAAE,CAACS,WAAH,CAAe;AAAEC,uBAAO,EAAE;AAAX,eAAf,CAAN;AAClC7J,qBAAO;AACLwJ,2BADK;AAELE,uBAAO,EAAEA,OAAO,IAAI;AAFf,iBAGFC,IAHE;AAIL;AACA3G,qBAAK,EAAEqG;AALF,iBAAP;AAOD;AACF,WAtBD,CAsBE,OAAOjJ,KAAP,EAAc;AACdsC,oBAAG,CAACtC,KAAJ,CAAUA,KAAV;AACAH,kBAAM,CAACG,KAAD,CAAN;AACD;AACF,SA3BD;;AA6BA,YAAI,CAAC,KAAKoI,gBAAV,EAA4B;AAC1BW,YAAE,GAAG,IAAIW,+CAAJ,4BAAyC,KAAKhB,KAA9C,GAAuD3H,uBAAvD,CAAL;AACAgI,YAAE,CAAC3I,gBAAH,CAAoB,SAApB,EAA+B,MAAOL,EAAP,IAAc;AAC3C,kBAAMiJ,UAAU,CAACjJ,EAAD,CAAhB;AACAgJ,cAAE,CAACrB,KAAH;AACAkB,0BAAc,CAAClB,KAAf;AACD,WAJD;AAKD,SAPD,MAOO;AACL,gBAAMiC,uBAAuB,GAAG,MAAOC,gBAAP,IAA0C;AACxE,gBAAI,CAACA,gBAAgB,CAAC3J,IAAtB,EAA4B;AAC5B,kBAAMF,EAAE,GAAG6J,gBAAgB,CAAC3J,IAA5B;AACA,gBAAIF,EAAE,CAAC8J,OAAH,gCAAmC,KAAKnB,KAAxC,CAAJ,EAAqD;AACrDrF,kBAAM,CAACnD,mBAAP,CAA2B,SAA3B,EAAsCyJ,uBAAtC;AACAX,sBAAU,CAACjJ,EAAD,CAAV;AACA6I,0BAAc,CAAClB,KAAf;AACD,WAPD;;AAQArE,gBAAM,CAACjD,gBAAP,CAAwB,SAAxB,EAAmCuJ,uBAAnC;AACD;;AACDf,sBAAc,CAACpB,IAAf;AACAoB,sBAAc,CAACkB,IAAf,CAAoB,OAApB,EAA6B,MAAM;AACjC,cAAIf,EAAJ,EAAQA,EAAE,CAACrB,KAAH;AACR7H,gBAAM,CAAC,IAAIM,KAAJ,CAAU,mBAAV,CAAD,CAAN;AACD,SAHD;AAID,OAtDM,CAAP;AAuDD;;AACD,WAAO,IAAP;AACD;;AA9F0D;;AAqG9C4H,2GAAf,E;;;AC7GA;AACA;AAGA;AAGe,MAAMgC,6BAAN,SAA6BhC,6BAA7B,CAAkD;AAK/DjB,aAAW,CACAkB,QADA,EAEAC,QAFA,EAGAC,YAHA,EAIA3G,WAJA,EAKA4G,MALA,EAMAC,gBANA,EAOAC,SAPA,EAQAC,WARA,EAST;AACA,UAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwC3G,WAAxC,EAAqD4G,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;AADA,SARSN,QAQT,GARSA,QAQT;AAAA,SAPSC,QAOT,GAPSA,QAOT;AAAA,SANSC,YAMT,GANSA,YAMT;AAAA,SALS3G,WAKT,GALSA,WAKT;AAAA,SAJS4G,MAIT,GAJSA,MAIT;AAAA,SAHSC,gBAGT,GAHSA,gBAGT;AAAA,SAFSC,SAET,GAFSA,SAET;AAAA,SADSC,WACT,GADSA,WACT;;AAAA,oDAbuC,OAavC;;AAAA,4CAX+B,gBAW/B;;AAEA,SAAK0B,WAAL;AACD;;AAEDA,aAAW,GAAS;AAClB,UAAMC,QAAQ,GAAG,IAAIxD,GAAJ,CAAQ,0CAAR,CAAjB;AACA,UAAMyD,YAAY,GAAGrH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACmB,SAAL,CAAe,KAAKqE,SAAL,IAAkB,EAAjC,CAAX,CAArB;AACA,UAAM8B,cAAc,GAAGC,+BAAS,CAC9B;AACExH,WAAK,EAAE,KAAKA,KADd;AAEEyH,mBAAa,EAAE,KAAKC,aAFtB;AAGEC,eAAS,EAAE,KAAKvC,QAHlB;AAIEE,kBAAY,EAAE,KAAKA,YAJrB;AAKEnE,WAAK,EAAE,KAAKyG;AALd,KAD8B,EAQ9BN,YAR8B,CAAhC;AAUAzH,UAAM,CAACC,IAAP,CAAYyH,cAAZ,EAA4B5F,OAA5B,CAAqCC,GAAD,IAAS;AAC3C,UAAI2F,cAAc,CAAC3F,GAAD,CAAlB,EAAyByF,QAAQ,CAACvD,YAAT,CAAsBC,MAAtB,CAA6BnC,GAA7B,EAAkC2F,cAAc,CAAC3F,GAAD,CAAhD;AAC1B,KAFD;AAGA,SAAKqE,QAAL,GAAgBoB,QAAhB;AACD;;AAEgB,QAAXQ,WAAW,CAAC5G,MAAD,EAA8D;AAC7E,UAAM;AAAEuF;AAAF,QAAkBvF,MAAxB;AACA,UAAMvC,QAAQ,GAAG,MAAMoJ,4BAAG,CACxB,mCADwB,EAExB;AACEC,aAAO,EAAE;AACPC,qBAAa,mBAAYxB,WAAZ;AADN;AADX,KAFwB,CAA1B;AAQA,UAAM;AAAEyB,QAAF;AAAMC,YAAN;AAAcC,WAAK,GAAG,EAAtB;AAA0BC,cAAQ,EAAEtJ,IAAI,GAAG,EAA3C;AAA+CuJ,mBAAa,GAAG;AAA/D,QAAsE3J,QAA5E;AACA,UAAM4J,YAAY,GAChBJ,MAAM,KAAK,IAAX,mDAC6C3D,MAAM,CAAC8D,aAAD,CAAN,GAAwB,CADrE,sDAEuCJ,EAFvC,cAE6CC,MAF7C,mBADF;AAIA,WAAO;AACLI,kBADK;AAELxJ,UAAI,YAAKA,IAAL,cAAauJ,aAAb,CAFC;AAGLF,WAHK;AAILI,gBAAU,EAAEN,EAJP;AAKL5C,cAAQ,EAAE,KAAKA,QALV;AAML1G,iBAAW,EAAE,KAAKA;AANb,KAAP;AAQD;;AA7D8D,C;;;ACPjE;AACA;AAGA;AAGe,MAAM6J,+BAAN,SAA8BrD,6BAA9B,CAAmD;AAKhEjB,aAAW,CACAkB,QADA,EAEAC,QAFA,EAGAC,YAHA,EAIA3G,WAJA,EAKA4G,MALA,EAMAC,gBANA,EAOAC,SAPA,EAQAC,WARA,EAST;AACA,UAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwC3G,WAAxC,EAAqD4G,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;AADA,SARSN,QAQT,GARSA,QAQT;AAAA,SAPSC,QAOT,GAPSA,QAOT;AAAA,SANSC,YAMT,GANSA,YAMT;AAAA,SALS3G,WAKT,GALSA,WAKT;AAAA,SAJS4G,MAIT,GAJSA,MAIT;AAAA,SAHSC,gBAGT,GAHSA,gBAGT;AAAA,SAFSC,SAET,GAFSA,SAET;AAAA,SADSC,WACT,GADSA,WACT;;AAAA,oDAbuC,OAavC;;AAAA,4CAX+B,sBAW/B;;AAEA,SAAK0B,WAAL;AACD;;AAEDA,aAAW,GAAS;AAClB,UAAMC,QAAQ,GAAG,IAAIxD,GAAJ,CAAQ,4CAAR,CAAjB;AACA,UAAMyD,YAAY,GAAGrH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACmB,SAAL,CAAe,KAAKqE,SAAL,IAAkB,EAAjC,CAAX,CAArB;AACA,UAAM8B,cAAc,GAAGC,+BAAS,CAC9B;AACExH,WAAK,EAAE,KAAKA,KADd;AAEEyH,mBAAa,EAAE,KAAKC,aAFtB;AAGEC,eAAS,EAAE,KAAKvC,QAHlB;AAIEE,kBAAY,EAAE,KAAKA,YAJrB;AAKEnE,WAAK,EAAE,KAAKyG;AALd,KAD8B,EAQ9BN,YAR8B,CAAhC;AAUAzH,UAAM,CAACC,IAAP,CAAYyH,cAAZ,EAA4B5F,OAA5B,CAAqCC,GAAD,IAAS;AAC3C,UAAI2F,cAAc,CAAC3F,GAAD,CAAlB,EAAyByF,QAAQ,CAACvD,YAAT,CAAsBC,MAAtB,CAA6BnC,GAA7B,EAAkC2F,cAAc,CAAC3F,GAAD,CAAhD;AAC1B,KAFD;AAGA,SAAKqE,QAAL,GAAgBoB,QAAhB;AACD;;AAEgB,QAAXQ,WAAW,CAAC5G,MAAD,EAA8D;AAC7E,UAAM;AAAEuF;AAAF,QAAkBvF,MAAxB;AACA,UAAMvC,QAAQ,GAAG,MAAMoJ,4BAAG,CACxB,qEADwB,EAExB;AACEC,aAAO,EAAE;AACPC,qBAAa,mBAAYxB,WAAZ;AADN;AADX,KAFwB,CAA1B;AAQA,UAAM;AAAE1H,UAAI,GAAG,EAAT;AAAamJ,QAAb;AAAiBQ,aAAjB;AAA0BN,WAAK,GAAG;AAAlC,QAAyCzJ,QAA/C;AACA,WAAO;AACLyJ,WADK;AAELrJ,UAFK;AAGLwJ,kBAAY,EAAEG,OAAO,CAACpL,IAAR,CAAaM,GAAb,IAAoB,EAH7B;AAIL0H,cAAQ,EAAE,KAAKA,QAJV;AAKLkD,gBAAU,EAAEN,EALP;AAMLtJ,iBAAW,EAAE,KAAKA;AANb,KAAP;AAQD;;AAzD+D,C;;;ACPlE;AACA;AAGA;AAGe,MAAM+J,2BAAN,SAA4BvD,6BAA5B,CAAiD;AAO9DjB,aAAW,CACAkB,QADA,EAEAC,QAFA,EAGAC,YAHA,EAIA3G,WAJA,EAKA4G,MALA,EAMAC,gBANA,EAOAC,SAPA,EAQAC,WARA,EAST;AACA,UAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwC3G,WAAxC,EAAqD4G,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;AADA,SARSN,QAQT,GARSA,QAQT;AAAA,SAPSC,QAOT,GAPSA,QAOT;AAAA,SANSC,YAMT,GANSA,YAMT;AAAA,SALS3G,WAKT,GALSA,WAKT;AAAA,SAJS4G,MAIT,GAJSA,MAIT;AAAA,SAHSC,gBAGT,GAHSA,gBAGT;AAAA,SAFSC,SAET,GAFSA,SAET;AAAA,SADSC,WACT,GADSA,WACT;;AAAA,oDAfuC,gBAevC;;AAAA,4CAb+B,sBAa/B;;AAAA,6CAXgC,wBAWhC;;AAEA,SAAK0B,WAAL;AACD;;AAEDA,aAAW,GAAS;AAClB,UAAMC,QAAQ,GAAG,IAAIxD,GAAJ,CAAQ,8CAAR,CAAjB;AACA,UAAMyD,YAAY,GAAGrH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACmB,SAAL,CAAe,KAAKqE,SAAL,IAAkB,EAAjC,CAAX,CAArB;AACA,UAAM8B,cAAc,GAAGC,+BAAS,CAC9B;AACExH,WAAK,EAAE,KAAKA,KADd;AAEEyH,mBAAa,EAAE,KAAKC,aAFtB;AAGEC,eAAS,EAAE,KAAKvC,QAHlB;AAIEuD,YAAM,EAAE,KAAKC,MAJf;AAKEtD,kBAAY,EAAE,KAAKA,YALrB;AAMEnE,WAAK,EAAE,KAAKyG,KANd;AAOE9B,WAAK,EAAE,KAAKA;AAPd,KAD8B,EAU9BwB,YAV8B,CAAhC;AAYAzH,UAAM,CAACC,IAAP,CAAYyH,cAAZ,EAA4B5F,OAA5B,CAAqCC,GAAD,IAAS;AAC3C,UAAI2F,cAAc,CAAC3F,GAAD,CAAlB,EAAyByF,QAAQ,CAACvD,YAAT,CAAsBC,MAAtB,CAA6BnC,GAA7B,EAAkC2F,cAAc,CAAC3F,GAAD,CAAhD;AAC1B,KAFD;AAGA,SAAKqE,QAAL,GAAgBoB,QAAhB;AACD;;AAEgB,QAAXQ,WAAW,CAAC5G,MAAD,EAA8D;AAC7E,UAAM;AAAEuF;AAAF,QAAkBvF,MAAxB;AACA,UAAMvC,QAAQ,GAAG,MAAMoJ,4BAAG,CAAmD,2CAAnD,EAAgG;AACxHC,aAAO,EAAE;AACPC,qBAAa,mBAAYxB,WAAZ;AADN;AAD+G,KAAhG,CAA1B;AAKA,UAAM;AAAEiC,aAAO,EAAEH,YAAY,GAAG,EAA1B;AAA8BH,WAAK,GAAG,EAAtC;AAA0CrJ,UAAI,GAAG;AAAjD,QAAwDJ,QAA9D;AACA,WAAO;AACLyJ,WADK;AAELrJ,UAFK;AAGLwJ,kBAHK;AAILjD,cAAQ,EAAE,KAAKA,QAJV;AAKLkD,gBAAU,EAAEJ,KAAK,CAAC3J,WAAN,EALP;AAMLG,iBAAW,EAAE,KAAKA;AANb,KAAP;AAQD;;AA1D6D,C;;;;;;;ACPhE;AACA;AACA;AACA;AAGA;AACA;AAGe,MAAMkK,qBAAN,SAAyB1D,6BAAzB,CAA8C;AAO3DjB,aAAW,CACAkB,QADA,EAEAC,QAFA,EAGAC,YAHA,EAIA3G,WAJA,EAKA4G,MALA,EAMAC,gBANA,EAOAC,SAPA,EAQAC,WARA,EAST;AACA,UAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwC3G,WAAxC,EAAqD4G,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;AADA,SARSN,QAQT,GARSA,QAQT;AAAA,SAPSC,QAOT,GAPSA,QAOT;AAAA,SANSC,YAMT,GANSA,YAMT;AAAA,SALS3G,WAKT,GALSA,WAKT;AAAA,SAJS4G,MAIT,GAJSA,MAIT;AAAA,SAHSC,gBAGT,GAHSA,gBAGT;AAAA,SAFSC,SAET,GAFSA,SAET;AAAA,SADSC,WACT,GADSA,WACT;;AAAA,4CAf+B,sBAe/B;;AAAA,oDAbuC,gBAavC;;AAAA,6CAXgC,OAWhC;;AAEA,SAAK0B,WAAL;AACD;;AAEDA,aAAW,GAAS;AAClB,UAAM;AAAE0B;AAAF,QAAa,KAAKrD,SAAxB;AACA,UAAM4B,QAAQ,GAAG,IAAIxD,GAAJ,CAAQiF,MAAR,CAAjB;AACAzB,YAAQ,CAAC0B,QAAT,IAAqB1B,QAAQ,CAAC0B,QAAT,CAAkBlL,QAAlB,CAA2B,GAA3B,IAAkC,WAAlC,GAAgD,YAArE;AACA,UAAMyJ,YAAY,GAAGrH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACmB,SAAL,CAAe,KAAKqE,SAApB,CAAX,CAArB;AACA,WAAO6B,YAAY,CAACwB,MAApB;AACA,UAAMvB,cAAc,GAAGC,+BAAS,CAC9B;AACExH,WAAK,EAAE,KAAKA,KADd;AAEEyH,mBAAa,EAAE,KAAKC,aAFtB;AAGEC,eAAS,EAAE,KAAKvC,QAHlB;AAIEuD,YAAM,EAAE,KAAKC,MAJf;AAKEtD,kBAAY,EAAE,KAAKA,YALrB;AAMEnE,WAAK,EAAE,KAAKyG,KANd;AAOEoB,gBAAU,EAAEvL,oBAAoB,CAAC,KAAKkB,WAAN,CAPlC;AAQEmH,WAAK,EAAE,KAAKA;AARd,KAD8B,EAW9BwB,YAX8B,CAAhC;AAaAzH,UAAM,CAACC,IAAP,CAAYyH,cAAZ,EAA4B5F,OAA5B,CAAqCC,GAAD,IAAS;AAC3C,UAAI2F,cAAc,CAAC3F,GAAD,CAAlB,EAAyByF,QAAQ,CAACvD,YAAT,CAAsBC,MAAtB,CAA6BnC,GAA7B,EAAkC2F,cAAc,CAAC3F,GAAD,CAAhD;AAC1B,KAFD;AAGA,SAAKqE,QAAL,GAAgBoB,QAAhB;AACD;;AAEgB,QAAXQ,WAAW,CAAC5G,MAAD,EAA8D;AAC7E,UAAM;AAAEyF,aAAF;AAAWF;AAAX,QAA2BvF,MAAjC;AACA,UAAM;AAAE6H,YAAF;AAAUlK,qBAAV;AAA2BC,+BAA3B;AAAsDoK,qBAAe,GAAG;AAAxE,QAAuF,KAAKxD,SAAlG;;AACA,QAAIe,WAAJ,EAAiB;AACf,UAAI;AACF,cAAM0C,SAAS,GAAG,IAAIrF,GAAJ,CAAQiF,MAAR,CAAlB;AACA,cAAMpK,QAAQ,GAAG,MAAMoJ,4BAAG,WAAmBpK,YAAY,CAACwL,SAAD,CAA/B,SAA6CD,eAA7C,GAAgE;AACxFlB,iBAAO,EAAE;AACPC,yBAAa,mBAAYxB,WAAZ;AADN;AAD+E,SAAhE,CAA1B;AAKA,cAAM;AAAEiC,iBAAF;AAAW3J,cAAX;AAAiBqJ;AAAjB,YAA2BzJ,QAAjC;AACA,eAAO;AACLyJ,eADK;AAELrJ,cAFK;AAGLwJ,sBAAY,EAAEG,OAHT;AAILF,oBAAU,EAAE9J,aAAa,CAACC,QAAD,EAAW,KAAKC,WAAhB,EAA6BC,eAA7B,EAA8CC,yBAA9C,CAJpB;AAKLwG,kBAAQ,EAAE,KAAKA,QALV;AAML1G,qBAAW,EAAE,KAAKA;AANb,SAAP;AAQD,OAhBD,CAgBE,OAAOvB,KAAP,EAAc;AACd;AACAsC,mCAAG,CAACyJ,IAAJ,CAAS/L,KAAT,EAAgB,sCAAhB;AACD;AACF;;AACD,QAAIsJ,OAAJ,EAAa;AACX,YAAM0C,YAAY,GAAGC,6BAAS,CAAgB3C,OAAhB,CAA9B;AACA,YAAM;AAAE5H,YAAF;AAAQqJ,aAAR;AAAeM;AAAf,UAA2BW,YAAjC;AACA,aAAO;AACLd,oBAAY,EAAEG,OADT;AAEL3J,YAFK;AAGLqJ,aAHK;AAILI,kBAAU,EAAE9J,aAAa,CAAC2K,YAAD,EAAe,KAAKzK,WAApB,EAAiCC,eAAjC,EAAkDC,yBAAlD,CAJpB;AAKLwG,gBAAQ,EAAE,KAAKA,QALV;AAML1G,mBAAW,EAAE,KAAKA;AANb,OAAP;AAQD;;AACD,UAAM,IAAIpB,KAAJ,CAAU,+BAAV,CAAN;AACD;;AApF0D,C;;ACV7D;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGe,MAAM+L,iCAAN,SAA+BnE,6BAA/B,CAAoD;AACjEjB,aAAW,CACAkB,QADA,EAEAC,QAFA,EAGAC,YAHA,EAIA3G,WAJA,EAKA4G,MALA,EAMAC,gBANA,EAOAC,SAPA,EAQAC,WARA,EAST;AACA,UAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwC3G,WAAxC,EAAqD4G,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;AADA,SARSN,QAQT,GARSA,QAQT;AAAA,SAPSC,QAOT,GAPSA,QAOT;AAAA,SANSC,YAMT,GANSA,YAMT;AAAA,SALS3G,WAKT,GALSA,WAKT;AAAA,SAJS4G,MAIT,GAJSA,MAIT;AAAA,SAHSC,gBAGT,GAHSA,gBAGT;AAAA,SAFSC,SAET,GAFSA,SAET;AAAA,SADSC,WACT,GADSA,WACT;AAEA,SAAK0B,WAAL;AACD;;AAEDA,aAAW,GAAS;AAClB,UAAME,YAAY,GAAGrH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACmB,SAAL,CAAe,KAAKqE,SAApB,CAAX,CAArB;AACA,WAAO6B,YAAY,CAACwB,MAApB;AACA,UAAMvB,cAAc,GAAGC,+BAAS,CAC9B;AACExH,WAAK,EAAE,KAAKA,KADd;AAEE2H,eAAS,EAAE,KAAKvC,QAFlB;AAGEU,WAAK,EAAE,KAAKA;AAHd,KAD8B,EAM9BwB,YAN8B,CAAhC;AASA,SAAKrB,QAAL,GAAgB,IAAIpC,GAAJ,CAAQH,YAAY,CAAC;AAAEC,aAAO,EAAE,KAAK2B,YAAhB;AAA8B1B,WAAK,EAAE,IAArC;AAA2C3E,UAAI,EAAEsI;AAAjD,KAAD,CAApB,CAAhB;AACD;;AAEgB,QAAXM,WAAW,CAAC5G,MAAD,EAA8D;AAC7E,UAAM;AAAEyF,aAAF;AAAWF;AAAX,QAA2BvF,MAAjC;AACA,UAAM;AAAE6H,YAAF;AAAUlK,qBAAV;AAA2BC,+BAA3B;AAAsDoK,qBAAe,GAAG;AAAxE,QAAuF,KAAKxD,SAAlG;;AACA,QAAIe,WAAJ,EAAiB;AACf,UAAI;AACF,cAAM0C,SAAS,GAAG,IAAIrF,GAAJ,CAAQiF,MAAR,CAAlB;AACA,cAAMpK,QAAQ,GAAG,MAAMoJ,4BAAG,WAAmBpK,YAAY,CAACwL,SAAD,CAA/B,SAA6CD,eAA7C,GAAgE;AACxFlB,iBAAO,EAAE;AACPC,yBAAa,mBAAYxB,WAAZ;AADN;AAD+E,SAAhE,CAA1B;AAKA,cAAM;AAAEiC,iBAAF;AAAW3J,cAAX;AAAiBqJ;AAAjB,YAA2BzJ,QAAjC;AACA,eAAO;AACLyJ,eADK;AAELrJ,cAFK;AAGLwJ,sBAAY,EAAEG,OAHT;AAILF,oBAAU,EAAE9J,aAAa,CAACC,QAAD,EAAW,KAAKC,WAAhB,EAA6BC,eAA7B,EAA8CC,yBAA9C,CAJpB;AAKLwG,kBAAQ,EAAE,KAAKA,QALV;AAML1G,qBAAW,EAAE,KAAKA;AANb,SAAP;AAQD,OAhBD,CAgBE,OAAOvB,KAAP,EAAc;AACd;AACAsC,mCAAG,CAACyJ,IAAJ,CAAS/L,KAAT,EAAgB,sCAAhB;AACD;AACF;;AACD,QAAIsJ,OAAJ,EAAa;AACX,YAAM0C,YAAY,GAAGC,6BAAS,CAAgB3C,OAAhB,CAA9B;AACA,YAAM;AAAE5H,YAAF;AAAQqJ,aAAR;AAAeM;AAAf,UAA2BW,YAAjC;AACA,aAAO;AACLd,oBAAY,EAAEG,OADT;AAEL3J,YAFK;AAGLqJ,aAHK;AAILI,kBAAU,EAAE9J,aAAa,CAAC2K,YAAD,EAAe,KAAKzK,WAApB,EAAiCC,eAAjC,EAAkDC,yBAAlD,CAJpB;AAKLwG,gBAAQ,EAAE,KAAKA,QALV;AAML1G,mBAAW,EAAE,KAAKA;AANb,OAAP;AAQD;;AACD,UAAM,IAAIpB,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAEDwI,mBAAiB,CAAC9E,MAAD,EAAwG;AACvH,UAAM;AAAEwF,cAAQ,EAAEC,OAAZ;AAAqBH,kBAAY,EAAEC;AAAnC,QAAmD,KAAKf,SAA9D;AACA,UAAMO,cAAc,GAAG,IAAIhC,kBAAJ,CAAiB;AAAErG,SAAG,EAAE,KAAKsI,QAAZ;AAAsB5C,cAAQ,EAAEpC,MAAM,CAACiF;AAAvC,KAAjB,CAAvB;;AACA,QAAI,KAAKX,MAAL,KAAgB5J,OAAO,CAACE,QAA5B,EAAsC;AACpCmK,oBAAc,CAACjB,QAAf,CAAwB9D,MAAM,CAAC+D,yBAA/B;AACD,KAFD,MAEO;AACL,aAAOjI,OAAO,CAACC,OAAR,CAAgB;AACrBgD,aAAK,EAAE,EADc;AAErB0G,eAFqB;AAGrBF;AAHqB,OAAhB,CAAP;AAKD;;AACD,WAAO,IAAP;AACD;;AAnFgE,C;;;;;;;;;;ACXnE;AACA;AACA;AACA;AAGA;AACA;AACA;AAGe,MAAMqC,8BAAN,SAAyB1D,6BAAzB,CAA8C;AAO3DjB,aAAW,CACAkB,QADA,EAEAC,QAFA,EAGAC,YAHA,EAIA3G,WAJA,EAKA4G,MALA,EAMAC,gBANA,EAOAC,SAPA,EAQAC,WARA,EAST;AACA,UAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwC3G,WAAxC,EAAqD4G,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;AADA,SARSN,QAQT,GARSA,QAQT;AAAA,SAPSC,QAOT,GAPSA,QAOT;AAAA,SANSC,YAMT,GANSA,YAMT;AAAA,SALS3G,WAKT,GALSA,WAKT;AAAA,SAJS4G,MAIT,GAJSA,MAIT;AAAA,SAHSC,gBAGT,GAHSA,gBAGT;AAAA,SAFSC,SAET,GAFSA,SAET;AAAA,SADSC,WACT,GADSA,WACT;;AAAA,4CAf+B,sBAe/B;;AAAA,oDAbuC,gBAavC;;AAAA,6CAXgC,OAWhC;;AAEA,SAAK0B,WAAL;AACD;;AAEDA,aAAW,GAAS;AAClB,UAAM;AAAE0B;AAAF,QAAa,KAAKrD,SAAxB;AACA,UAAMyD,SAAS,GAAG,IAAIrF,GAAJ,CAAQiF,MAAR,CAAlB;AACAI,aAAS,CAACH,QAAV,GAAqB,qBAArB;AACA,SAAK9C,QAAL,GAAgBiD,SAAhB;AACD;;AAEgB,QAAXrB,WAAW,CAAC5G,MAAD,EAA8D;AAC7E,UAAM;AAAEyF,aAAF;AAAWF;AAAX,QAA2BvF,MAAjC;AACA,UAAM;AAAE6H,YAAF;AAAUlK,qBAAV;AAA2BC;AAA3B,QAAyD,KAAK4G,SAApE;;AACA,QAAI;AACF,YAAMyD,SAAS,GAAG,IAAIrF,GAAJ,CAAQiF,MAAR,CAAlB;AACA,YAAMpK,QAAQ,GAAG,MAAMoJ,4BAAG,WAAmBpK,YAAY,CAACwL,SAAD,CAA/B,eAAsD;AAC9EnB,eAAO,EAAE;AACPC,uBAAa,mBAAYxB,WAAZ;AADN;AADqE,OAAtD,CAA1B;AAKA,YAAM;AAAEiC,eAAF;AAAW3J,YAAX;AAAiBqJ;AAAjB,UAA2BzJ,QAAjC;AACA,aAAO;AACLyJ,aADK;AAELrJ,YAFK;AAGLwJ,oBAAY,EAAEG,OAHT;AAILF,kBAAU,EAAE9J,aAAa,CAACC,QAAD,EAAW,KAAKC,WAAhB,EAA6BC,eAA7B,EAA8CC,yBAA9C,CAJpB;AAKLwG,gBAAQ,EAAE,KAAKA,QALV;AAML1G,mBAAW,EAAE,KAAKA;AANb,OAAP;AAQD,KAhBD,CAgBE,OAAOvB,KAAP,EAAc;AACdsC,cAAG,CAACtC,KAAJ,CAAUA,KAAV;AACA,YAAMgM,YAAY,GAAGC,6BAAS,CAAC3C,OAAD,CAA9B;AACA,YAAM;AAAE5H,YAAF;AAAQqJ,aAAR;AAAeM;AAAf,UAA2BW,YAAjC;AACA,aAAO;AACLd,oBAAY,EAAEG,OADT;AAEL3J,YAFK;AAGLqJ,aAHK;AAILI,kBAAU,EAAE9J,aAAa,CAAC2K,YAAD,EAAe,KAAKzK,WAApB,EAAiCC,eAAjC,EAAkDC,yBAAlD,CAJpB;AAKLwG,gBAAQ,EAAE,KAAKA,QALV;AAML1G,mBAAW,EAAE,KAAKA;AANb,OAAP;AAQD;AACF;;AAEDoH,mBAAiB,GAAiC;AAChD,WAAO,IAAIhJ,OAAJ,CAAiC,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC3D,UAAI,KAAKuI,gBAAT,EAA2B;AACzBvI,cAAM,CAAC,IAAIM,KAAJ,CAAU,gDAAV,CAAD,CAAN;AACA;AACD;;AACD,YAAM6I,UAAU,GAAIjJ,EAAD,IAAgD;AACjE,YAAI;AACF,gBAAM;AAAEC,iBAAF;AAASC;AAAT,cAAkBF,EAAxB;;AACA,uBAGIE,IAAI,IAAI,EAHZ;AAAA,gBAAM;AACJgJ,0BADI;AAEJC,sBAAU,EAAE;AAAEC,0BAAY,EAAEC,WAAhB;AAA6BC,sBAAQ,EAAEC;AAAvC;AAFR,WAAN;AAAA,gBAEiEC,IAFjE,0CAEEL,UAFF;;AAIA,cAAIlJ,KAAJ,EAAW;AACTsC,oBAAG,CAACtC,KAAJ,CAAUD,EAAE,CAACC,KAAb;AACAH,kBAAM,CAAC,IAAIM,KAAJ,CAAUH,KAAV,CAAD,CAAN;AACA;AACD;;AACD,cAAID,EAAE,CAACE,IAAH,IAAWgJ,cAAc,CAAChB,QAAf,KAA4B,KAAKA,QAAhD,EAA0D;AACxD3F,oBAAG,CAACC,IAAJ,CAASxC,EAAE,CAACE,IAAZ;AACAL,mBAAO,CAAC;AAAEwJ,yBAAH;AAAgBE,qBAAO,EAAEA,OAAO,IAAI;AAApC,eAA2CC,IAA3C;AAAiD3G,mBAAK,EAAEqG;AAAxD,eAAP;AACD;AACF,SAfD,CAeE,OAAOjJ,KAAP,EAAc;AACdsC,kBAAG,CAACtC,KAAJ,CAAUA,KAAV;AACAH,gBAAM,CAACG,KAAD,CAAN;AACD;AACF,OApBD;;AAqBA,YAAM+I,EAAE,GAAG,IAAIW,+CAAJ,4BAAyC,KAAKhB,KAA9C,GAAuD3H,uBAAvD,CAAX;AACAgI,QAAE,CAAC3I,gBAAH,CAAoB,SAApB,EAA+B,MAAOL,EAAP,IAAc;AAC3CiJ,kBAAU,CAACjJ,EAAD,CAAV;AACAgJ,UAAE,CAACrB,KAAH;AACD,OAHD;;AAIA,UAAI;AACF,cAAM;AAAEkE,oBAAU,GAAG,OAAf;AAAwBO;AAAxB,YAAuC,KAAK9D,SAAlD;AACA,cAAM8B,cAAc,GAAGC,+BAAS,CAC9B;AACEG,mBAAS,EAAE,KAAKvC,QADlB;AAEE4D,oBAFF;AAGEb,eAAK,EAAEa,UAAU,KAAK,OAAf,GAAyBO,UAAzB,GAAsCtH,SAH/C;AAIEuH,sBAAY,EAAER,UAAU,KAAK,KAAf,GAAuBO,UAAvB,GAAoCtH,SAJpD;AAKEwH,cAAI,EAAE,MALR;AAMEC,oBAAU,EAAE;AACVvI,iBAAK,EAAE,KAAKyG,KADF;AAEV5H,iBAAK,EAAE,KAAKA,KAFF;AAGVyH,yBAAa,EAAE,KAAKC,aAHV;AAIVpC,wBAAY,EAAE,KAAKA,YAJT;AAKVQ,iBAAK,EAAE,KAAKA,KALF;AAMV6C,kBAAM,EAAE,KAAKC;AANH;AANd,SAD8B,EAgB9B;AACEc,oBAAU,EAAE,KAAKjE;AADnB,SAhB8B,CAAhC,CAFE,CAsBF;AACA;;AACAkE,qCAAI,CAAC,KAAK1D,QAAL,CAAcrI,IAAf,EAAqBqC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACmB,SAAL,CAAemG,cAAf,CAAX,CAArB,CAAJ,CACGqC,IADH,CACSC,QAAD,IAAc;AAClBnK,kBAAG,CAACC,IAAJ,CAAS,QAAT,EAAmBkK,QAAnB;AACA,iBAAO5H,SAAP;AACD,SAJH,EAKG6H,KALH,CAKU1M,KAAD,IAAW;AAChBsC,kBAAG,CAACtC,KAAJ,CAAUA,KAAV;AACAH,gBAAM,CAACG,KAAD,CAAN;AACD,SARH;AASD,OAjCD,CAiCE,OAAOA,KAAP,EAAc;AACdsC,gBAAG,CAACtC,KAAJ,CAAUA,KAAV;AACAH,cAAM,CAACG,KAAD,CAAN;AACD;AACF,KApEM,CAAP;AAqED;;AApI0D,C;;;ACX7D;AACA;AAGA;AAGe,MAAM2M,2BAAN,SAA4B5E,6BAA5B,CAAiD;AAK9DjB,aAAW,CACAkB,QADA,EAEAC,QAFA,EAGAC,YAHA,EAIA3G,WAJA,EAKA4G,MALA,EAMAC,gBANA,EAOAC,SAPA,EAQAC,WARA,EAST;AACA,UAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwC3G,WAAxC,EAAqD4G,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;AADA,SARSN,QAQT,GARSA,QAQT;AAAA,SAPSC,QAOT,GAPSA,QAOT;AAAA,SANSC,YAMT,GANSA,YAMT;AAAA,SALS3G,WAKT,GALSA,WAKT;AAAA,SAJS4G,MAIT,GAJSA,MAIT;AAAA,SAHSC,gBAGT,GAHSA,gBAGT;AAAA,SAFSC,SAET,GAFSA,SAET;AAAA,SADSC,WACT,GADSA,WACT;;AAAA,oDAbuC,OAavC;;AAAA,4CAX+B,UAW/B;;AAEA,SAAK0B,WAAL;AACD;;AAEDA,aAAW,GAAS;AAClB,UAAMC,QAAQ,GAAG,IAAIxD,GAAJ,kDAAkDpD,MAAM,CAACgC,UAAP,GAAoB,GAApB,GAA0B,UAA1B,GAAuC,EAAzF,EAAjB;AACA,UAAM6E,YAAY,GAAGrH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACmB,SAAL,CAAe,KAAKqE,SAAL,IAAkB,EAAjC,CAAX,CAArB;AACA,UAAM8B,cAAc,GAAGC,+BAAS,CAC9B;AACExH,WAAK,EAAE,KAAKA,KADd;AAEEyH,mBAAa,EAAE,KAAKC,aAFtB;AAGEC,eAAS,EAAE,KAAKvC,QAHlB;AAIEE,kBAAY,EAAE,KAAKA,YAJrB;AAKEnE,WAAK,EAAE,KAAKyG;AALd,KAD8B,EAQ9BN,YAR8B,CAAhC;AAUAzH,UAAM,CAACC,IAAP,CAAYyH,cAAZ,EAA4B5F,OAA5B,CAAqCC,GAAD,IAAS;AAC3C,UAAI2F,cAAc,CAAC3F,GAAD,CAAlB,EAAyByF,QAAQ,CAACvD,YAAT,CAAsBC,MAAtB,CAA6BnC,GAA7B,EAAkC2F,cAAc,CAAC3F,GAAD,CAAhD;AAC1B,KAFD;AAGA,SAAKqE,QAAL,GAAgBoB,QAAhB;AACD;;AAEgB,QAAXQ,WAAW,CAAC5G,MAAD,EAA8D;AAC7E,UAAM;AAAEuF;AAAF,QAAkBvF,MAAxB;AACA,UAAMvC,QAAQ,GAAG,MAAMoJ,4BAAG,CAAqC,oCAArC,EAA2E;AACnGC,aAAO,EAAE;AACPC,qBAAa,mBAAYxB,WAAZ;AADN;AAD0F,KAA3E,CAA1B;AAKA,UAAM;AAAEwD,cAAQ,EAAE1B,YAAY,GAAG,EAA3B;AAA+BxJ,UAAI,GAAG;AAAtC,QAA6CJ,QAAnD;AACA,WAAO;AACLyJ,WAAK,EAAE,EADF;AAELrJ,UAFK;AAGLwJ,kBAAY,EAAEA,YAAY,CAAClJ,KAAb,CAAmB,GAAnB,EAAwBW,MAAxB,GAAiC,CAAjC,GAAqCuI,YAAY,CAAClJ,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAArC,GAAkEkJ,YAH3E;AAILjD,cAAQ,EAAE,KAAKA,QAJV;AAKLkD,gBAAU,EAAEzJ,IAAI,CAACN,WAAL,EALP;AAMLG,iBAAW,EAAE,KAAKA;AANb,KAAP;AAQD;;AAtD6D,C;;;ACPhE;AACA;AAGA;AAGe,MAAMsL,2BAAN,SAA4B9E,6BAA5B,CAAiD;AAK9DjB,aAAW,CACAkB,QADA,EAEAC,QAFA,EAGAC,YAHA,EAIA3G,WAJA,EAKA4G,MALA,EAMAC,gBANA,EAOAC,SAPA,EAQAC,WARA,EAST;AACA,UAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwC3G,WAAxC,EAAqD4G,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;AADA,SARSN,QAQT,GARSA,QAQT;AAAA,SAPSC,QAOT,GAPSA,QAOT;AAAA,SANSC,YAMT,GANSA,YAMT;AAAA,SALS3G,WAKT,GALSA,WAKT;AAAA,SAJS4G,MAIT,GAJSA,MAIT;AAAA,SAHSC,gBAGT,GAHSA,gBAGT;AAAA,SAFSC,SAET,GAFSA,SAET;AAAA,SADSC,WACT,GADSA,WACT;;AAAA,oDAbuC,OAavC;;AAAA,4CAX+B,iBAW/B;;AAEA,SAAK0B,WAAL;AACD;;AAEDA,aAAW,GAAS;AAClB,UAAMC,QAAQ,GAAG,IAAIxD,GAAJ,CAAQ,uCAAR,CAAjB;AACA,UAAMyD,YAAY,GAAGrH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACmB,SAAL,CAAe,KAAKqE,SAAL,IAAkB,EAAjC,CAAX,CAArB;AACA,UAAM8B,cAAc,GAAGC,+BAAS,CAC9B;AACExH,WAAK,EAAE,KAAKA,KADd;AAEEyH,mBAAa,EAAE,KAAKC,aAFtB;AAGEC,eAAS,EAAE,KAAKvC,QAHlB;AAIEE,kBAAY,EAAE,KAAKA,YAJrB;AAKEnE,WAAK,EAAE,KAAKyG,KALd;AAMEsC,kBAAY,EAAE;AANhB,KAD8B,EAS9B5C,YAT8B,CAAhC;AAWAzH,UAAM,CAACC,IAAP,CAAYyH,cAAZ,EAA4B5F,OAA5B,CAAqCC,GAAD,IAAS;AAC3C,UAAI2F,cAAc,CAAC3F,GAAD,CAAlB,EAAyByF,QAAQ,CAACvD,YAAT,CAAsBC,MAAtB,CAA6BnC,GAA7B,EAAkC2F,cAAc,CAAC3F,GAAD,CAAhD;AAC1B,KAFD;AAGA,SAAKqE,QAAL,GAAgBoB,QAAhB;AACD;;AAEgB,QAAXQ,WAAW,CAAC5G,MAAD,EAA8D;AAC7E,UAAM;AAAEuF;AAAF,QAAkBvF,MAAxB;AACA,UAAMvC,QAAQ,GAAG,MAAMoJ,4BAAG,CACxB,mCADwB,EAExB;AACEC,aAAO,EAAE;AACPC,qBAAa,mBAAYxB,WAAZ,CADN;AAEP,qBAAa,KAAKpB;AAFX;AADX,KAFwB,CAA1B;AASA,UAAM,CAAC;AAAE+E,uBAAiB,EAAE7B,YAAY,GAAG,EAApC;AAAwC8B,kBAAY,EAAEtL,IAAI,GAAG,EAA7D;AAAiEqJ,WAAK,GAAG,EAAzE;AAA6EF,QAAE,EAAEM;AAAjF,KAAD,IAAkG7J,QAAQ,CAACrB,IAAT,IAAiB,EAAzH;AACA,WAAO;AACLiL,kBADK;AAELxJ,UAFK;AAGLqJ,WAHK;AAILI,gBAJK;AAKLlD,cAAQ,EAAE,KAAKA,QALV;AAML1G,iBAAW,EAAE,KAAKA;AANb,KAAP;AAQD;;AA3D6D,C;;ACPhE;AACA;AAGA;AACA;AAGA,MAAM0L,sBAAsB,GAAG,oCAA/B;AAEe,MAAMC,+BAAN,SAA8BnF,6BAA9B,CAAmD;AAChEjB,aAAW,CACAkB,QADA,EAEAC,QAFA,EAGAC,YAHA,EAIA3G,WAJA,EAKA4G,MALA,EAMAC,gBANA,EAOAC,SAPA,EAQAC,WARA,EASA6E,YATA,EAUT;AACA,UAAMnF,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwC3G,WAAxC,EAAqD4G,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;AADA,SATSN,QAST,GATSA,QAST;AAAA,SARSC,QAQT,GARSA,QAQT;AAAA,SAPSC,YAOT,GAPSA,YAOT;AAAA,SANS3G,WAMT,GANSA,WAMT;AAAA,SALS4G,MAKT,GALSA,MAKT;AAAA,SAJSC,gBAIT,GAJSA,gBAIT;AAAA,SAHSC,SAGT,GAHSA,SAGT;AAAA,SAFSC,WAET,GAFSA,WAET;AAAA,SADS6E,YACT,GADSA,YACT;AAEA,SAAKnD,WAAL;AACD;;AAEDA,aAAW,GAAS;AAClB,UAAMC,QAAQ,GAAG,IAAIxD,GAAJ,CAAQ,gCAAR,CAAjB;AACA,UAAMyD,YAAY,GAAGrH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACmB,SAAL,CAAe,KAAKqE,SAAL,IAAkB,EAAjC,CAAX,CAArB;AACA,UAAM8B,cAAc,GAAGC,+BAAS,CAC9B;AACEgD,mBAAa,EAAE,CAAC,CAAC,KAAKD,YADxB;AAEEvK,WAAK,EAAE,KAAKA,KAFd;AAGE2H,eAAS,EAAE,KAAKvC,QAHlB;AAIEE,kBAAY,EAAE,KAAKA;AAJrB,KAD8B,EAO9BgC,YAP8B,CAAhC;AASAzH,UAAM,CAACC,IAAP,CAAYyH,cAAZ,EAA4B5F,OAA5B,CAAqCC,GAAD,IAAS;AAC3C,UAAI2F,cAAc,CAAC3F,GAAD,CAAlB,EAAyByF,QAAQ,CAACvD,YAAT,CAAsBC,MAAtB,CAA6BnC,GAA7B,EAAkC2F,cAAc,CAAC3F,GAAD,CAAhD;AAC1B,KAFD;AAGA,SAAKqE,QAAL,GAAgBoB,QAAhB;AACD;;AAEgB,QAAXQ,WAAW,CAAC4C,UAAD,EAAkE;AACjF,UAAM;AAAE/D,aAAF;AAAWgE,SAAX;AAAgBC,uBAAhB;AAAmCC;AAAnC,QAAmDH,UAAzD;AACA,QAAIlC,UAAJ;AACA,QAAIsC,SAAJ;AACA,QAAIC,cAAJ;AACA,QAAIC,iBAAJ;AACA,QAAIC,SAAJ;AACA,QAAIC,SAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,MAAJ;;AAEA,QAAIR,iBAAiB,KAAK,MAA1B,EAAkC;AAChCjL,cAAG,CAAC0L,KAAJ,CAAU,wEAAV;;AACA,UAAI;AACF,SAAC;AACCC,qBAAW,EAAE9C,UADd;AAECsC,mBAFD;AAGCC,wBAHD;AAICC,2BAJD;AAKCC,mBALD;AAMCC,mBAND;AAOCC,kBAPD;AAQCC;AARD,YASGlL,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACyK,WAAD,CAAf,CATJ;AAUD,OAXD,CAWE,OAAOxN,KAAP,EAAc;AACdsC,gBAAG,CAACyJ,IAAJ,CAAS,6BAAT,EAAwC/L,KAAxC;AACA,SAAC;AACCiO,qBAAW,EAAE9C,UADd;AAECsC,mBAFD;AAGCC,wBAHD;AAICC,2BAJD;AAKCC,mBALD;AAMCC,mBAND;AAOCC,kBAPD;AAQCC;AARD,YASG,MAAMrD,4BAAG,WAAIuC,sBAAJ,8BAA8C3D,OAA9C,EATb;AAUD;AACF,KA1BD,MA0BO;AACLhH,cAAG,CAAC0L,KAAJ,CAAU,4EAAV;AACA,OAAC;AACCC,mBAAW,EAAE9C,UADd;AAECsC,iBAFD;AAGCC,sBAHD;AAICC,yBAJD;AAKCC,iBALD;AAMCC,iBAND;AAOCC,gBAPD;AAQCC;AARD,UASG,MAAMrD,4BAAG,WAAIuC,sBAAJ,8BAA8C3D,OAA9C,EATb;AAUD;;AAED,QAAImE,SAAS,KAAKnE,OAAlB,EAA2B;AACzB,YAAM,IAAInJ,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,WAAO;AACL4K,WAAK,EAAE,EADF;AAELrJ,UAAI,EAAE,gBAFD;AAGLwJ,kBAAY,EAAE,EAHT;AAILjD,cAAQ,EAAE,KAAKA,QAJV;AAKLkD,gBALK;AAML5J,iBAAW,EAAE,KAAKA,WANb;AAOL+L,SAPK;AAQLH,kBAAY,EAAE,KAAKA,YARd;AASLe,yBAAmB,EAAE;AACnBT,iBADmB;AAEnBC,sBAFmB;AAGnBC,yBAHmB;AAInBC,iBAJmB;AAKnBC,iBALmB;AAMnBC,gBANmB;AAOnBC;AAPmB;AAThB,KAAP;AAmBD;;AA5G+D,C;;ACVlE;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,aAAa,GAAG,QAUoB;AAAA,MAVnB;AACrBnG,YADqB;AAErBE,gBAFqB;AAGrB3G,eAHqB;AAIrB0G,YAJqB;AAKrBI,aALqB;AAMrBD,oBANqB;AAOrBD,UAPqB;AAQrBG,eARqB;AASrB6E;AATqB,GAUmB;;AACxC,MAAI,CAAClF,QAAD,IAAa,CAAC1G,WAAd,IAA6B,CAACyG,QAAlC,EAA4C;AAC1C,UAAM,IAAI7H,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,QAAM;AAAEuL,UAAF;AAAUS,cAAV;AAAsB9C,YAAtB;AAAgCF;AAAhC,MAAiDd,SAAS,IAAI,EAApE;;AACA,UAAQ9G,WAAR;AACE,SAAKlE,KAAK,CAACC,MAAX;AACE,aAAO,IAAIgO,2BAAJ,CAAkBtD,QAAlB,EAA4BC,QAA5B,EAAsCC,YAAtC,EAAoD3G,WAApD,EAAiE4G,MAAjE,EAAyEC,gBAAzE,EAA2FC,SAA3F,EAAsGC,WAAtG,CAAP;;AACF,SAAKjL,KAAK,CAACE,QAAX;AACE,aAAO,IAAI6N,+BAAJ,CAAoBpD,QAApB,EAA8BC,QAA9B,EAAwCC,YAAxC,EAAsD3G,WAAtD,EAAmE4G,MAAnE,EAA2EC,gBAA3E,EAA6FC,SAA7F,EAAwGC,WAAxG,CAAP;;AACF,SAAKjL,KAAK,CAACK,MAAX;AACE,aAAO,IAAImP,2BAAJ,CAAkB7E,QAAlB,EAA4BC,QAA5B,EAAsCC,YAAtC,EAAoD3G,WAApD,EAAiE4G,MAAjE,EAAyEC,gBAAzE,EAA2FC,SAA3F,EAAsGC,WAAtG,CAAP;;AACF,SAAKjL,KAAK,CAACG,MAAX;AACE,aAAO,IAAImP,2BAAJ,CAAkB3E,QAAlB,EAA4BC,QAA5B,EAAsCC,YAAtC,EAAoD3G,WAApD,EAAiE4G,MAAjE,EAAyEC,gBAAzE,EAA2FC,SAA3F,EAAsGC,WAAtG,CAAP;;AACF,SAAKjL,KAAK,CAACI,OAAX;AACE,aAAO,IAAIsM,6BAAJ,CAAmB/B,QAAnB,EAA6BC,QAA7B,EAAuCC,YAAvC,EAAqD3G,WAArD,EAAkE4G,MAAlE,EAA0EC,gBAA1E,EAA4FC,SAA5F,EAAuGC,WAAvG,CAAP;;AACF,SAAKjL,KAAK,CAACa,YAAX;AACE,UAAI,CAACwN,MAAD,IAAW,CAACS,UAAhB,EAA4B,MAAM,IAAIhM,KAAJ,CAAU,gBAAV,CAAN;AAC5B,aAAO,IAAIiO,8BAAJ,CAAwBpG,QAAxB,EAAkCC,QAAlC,EAA4CC,YAA5C,EAA0D3G,WAA1D,EAAuE4G,MAAvE,EAA+EC,gBAA/E,EAAiGC,SAAjG,EAA4GC,WAA5G,CAAP;;AACF,SAAKjL,KAAK,CAACM,KAAX;AACA,SAAKN,KAAK,CAACO,MAAX;AACA,SAAKP,KAAK,CAACQ,QAAX;AACA,SAAKR,KAAK,CAACS,OAAX;AACA,SAAKT,KAAK,CAACU,KAAX;AACA,SAAKV,KAAK,CAACW,IAAX;AACA,SAAKX,KAAK,CAACY,cAAX;AACA,SAAKZ,KAAK,CAACc,GAAX;AACE,UAAI,CAACuN,MAAL,EAAa,MAAM,IAAIvL,KAAJ,CAAU,gBAAV,CAAN;;AACb,UAAIkJ,QAAQ,IAAIF,YAAhB,EAA8B;AAC5B,eAAO,IAAI+C,iCAAJ,CAAqBlE,QAArB,EAA+BC,QAA/B,EAAyCC,YAAzC,EAAuD3G,WAAvD,EAAoE4G,MAApE,EAA4EC,gBAA5E,EAA8FC,SAA9F,EAAyGC,WAAzG,CAAP;AACD;;AACD,aAAO,IAAImD,qBAAJ,CAAezD,QAAf,EAAyBC,QAAzB,EAAmCC,YAAnC,EAAiD3G,WAAjD,EAA8D4G,MAA9D,EAAsEC,gBAAtE,EAAwFC,SAAxF,EAAmGC,WAAnG,CAAP;;AACF,SAAKjL,KAAK,CAACe,QAAX;AACE,aAAO,IAAI8O,+BAAJ,CAAoBlF,QAApB,EAA8BC,QAA9B,EAAwCC,YAAxC,EAAsD3G,WAAtD,EAAmE4G,MAAnE,EAA2EC,gBAA3E,EAA6FC,SAA7F,EAAwGC,WAAxG,EAAqH6E,YAArH,CAAP;;AACF;AACE,YAAM,IAAIhN,KAAJ,CAAU,oBAAV,CAAN;AA9BJ;AAgCD,CA/CD;;AAiDegO,gEAAf,E;;;;;;;;;;;;;;AC7DA;AAEA;AAEO,MAAME,qBAAqB,GAAIC,OAAD,IACnC,IAAI3O,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,QAAM0O,KAAK,aAAMD,OAAN,UAAX;;AAEA,MAAI,mBAAmBjL,MAAM,CAAC8C,SAA9B,EAAyC;AACvC;AACAqI,gDAAQ,CAACD,KAAD,EAAQ;AACdE,WAAK,GAAG;AACNnM,gBAAG,CAACC,IAAJ,CAAS,qGAAT;AACA3C,eAAO,CAACiF,SAAD,CAAP;AACD,OAJa;;AAKd6J,gBAAU,GAAG;AACXpM,gBAAG,CAACC,IAAJ,CAAS,qCAAT;AACA3C,eAAO,CAACiF,SAAD,CAAP;AACD,OARa;;AASd8J,YAAM,GAAG;AACPrM,gBAAG,CAACC,IAAJ,CAAS,0CAAT;AACA3C,eAAO,CAACiF,SAAD,CAAP;AACD,OAZa;;AAad+J,iBAAW,GAAG;AACZtM,gBAAG,CAACC,IAAJ,CAAS,6BAAT;AACD,OAfa;;AAgBdsM,aAAO,GAAG;AACRvM,gBAAG,CAACC,IAAJ,CAAS,2CAAT;AACD,OAlBa;;AAmBduM,aAAO,GAAG;AACRxM,gBAAG,CAACC,IAAJ,CAAS,+DAAT;AACA1C,cAAM,CAAC,IAAIM,KAAJ,CAAU,gBAAV,CAAD,CAAN;AACD,OAtBa;;AAuBdH,WAAK,CAACA,KAAD,EAAQ;AACXsC,gBAAG,CAACtC,KAAJ,CAAU,2CAAV,EAAuDA,KAAvD;AACAH,cAAM,CAACG,KAAD,CAAN;AACD;;AA1Ba,KAAR,CAAR;AA4BD,GA9BD,MA8BO;AACLH,UAAM,CAAC,IAAIM,KAAJ,CAAU,mCAAV,CAAD,CAAN;AACD;AACF,CApCD,CADK,C;;;;;;;;;;;;;ACJP;AACA;AACA;AAEA;AAoBA;AACA;AAaA;AASA;;AAEA,MAAM4O,gBAAN,CAAiB;AAiBfjI,aAAW,OAcQ;AAAA,QAdP;AACVwH,aADU;AAEVU,aAAO,GAAG/R,aAAa,CAACE,OAFd;AAGV8R,0BAHU;AAIVC,mBAAa,GAAG,KAJN;AAKVC,kBAAY,GAAG,KALL;AAMV/G,sBAAgB,GAAG,KANT;AAOVgH,sBAAgB,GAAG,UAPT;AAQVC,YAAM,GAAG,eARC;AASVlH,YAAM,GAAG5J,OAAO,CAACC,KATP;AAUV8Q,iCAA2B,GAAG5Q,8BAA8B,CAACE,eAVnD;AAWVgJ,+BAAyB,GAAG,KAXlB;AAYVkB,mBAZU;AAaVyG,iBAAW,GAAG;AAbJ,KAcO;;AAAA;;AAAA;;AAAA;;AAAA;;AACjB,SAAKC,aAAL,GAAqB,KAArB;AACA,UAAMC,OAAO,GAAG,IAAIhJ,GAAJ,CAAQ6H,OAAR,CAAhB;AACA,SAAKoB,MAAL,GAAc;AACZpB,aAAO,EAAEhO,YAAY,CAACmP,OAAD,CADT;;AAEZ,UAAIvH,YAAJ,GAAmB;AACjB,yBAAU,KAAKoG,OAAf,SAAyBc,gBAAzB;AACD,OAJW;;AAKZhH,sBALY;AAMZD,YANY;AAOZmH,iCAPY;AAQZ1H,+BARY;AASZkB;AATY,KAAd;AAWA,UAAM6G,KAAK,GAAG,IAAIC,kBAAJ,CAAU;AACtBT,kBADsB;AAEtBU,kBAAY,EAAEN,WAFQ;AAGtBO,eAAS,YAAKxQ,UAAU,CAAC0P,OAAD,CAAf,eAHa;AAItBe,gBAAU,YAAKzQ,UAAU,CAAC0P,OAAD,CAAf,cAJY;AAKtBA,aAAO,EAAEA;AALa,KAAV,CAAd;AAOAY,sBAAK,CAACI,SAAN,CAAgBX,MAAhB;AACA,SAAKM,KAAL,GAAaA,KAAb;AACA,UAAMM,UAAU,GAAG/Q,WAAW,CAAC8P,OAAD,CAA9B;AACA,SAAKkB,iBAAL,GAAyB,IAAIC,4BAAJ,CAAsB;AAAEnB,aAAO,EAAEiB,UAAX;AAAuBG,kBAAY,EAAEnB,oBAAoB,IAAIhQ,YAAY,CAAC+P,OAAD;AAAzE,KAAtB,CAAzB;AACA,QAAIE,aAAJ,EAAmB5M,QAAG,CAAC+N,SAAJ,GAAnB,KACK/N,QAAG,CAACgO,UAAJ;AACN;;AAES,QAAJC,IAAI,GAA6F;AAAA,QAA5F;AAAEC,YAAM,GAAG,KAAX;AAAkBC,cAAQ,GAAG,KAA7B;AAAoCC,kBAAY,GAAG;AAAnD,KAA4F,uEAAnB,EAAmB;;AACrG,QAAID,QAAJ,EAAc;AACZ,WAAKjB,aAAL,GAAqB,IAArB;AACA;AACD;;AACD,QAAI,CAACgB,MAAL,EAAa;AACX,YAAMG,eAAe,GAAG,MAAMC,KAAK,WAAI,KAAKlB,MAAL,CAAYpB,OAAhB,YAAgC;AAAEuC,aAAK,EAAE;AAAT,OAAhC,CAAnC;;AACA,UAAIF,eAAe,CAACG,EAApB,EAAwB;AACtB,YAAI;AACF,gBAAMzC,qBAAqB,CAAC,KAAKqB,MAAL,CAAYpB,OAAb,CAA3B;AACA,eAAKkB,aAAL,GAAqB,IAArB;AACA;AACD,SAJD,CAIE,OAAOxP,KAAP,EAAc;AACdsC,kBAAG,CAACyJ,IAAJ,CAAS/L,KAAT;AACD;AACF,OARD,MAQO;AACL,cAAM,IAAIG,KAAJ,CAAU,qDAAV,CAAN;AACD;AACF;;AACD,QAAI,CAACuQ,YAAL,EAAmB;AACjB;AACA,UAAIxK,SAAS,EAAb,EAAiB;AACf,aAAKsJ,aAAL,GAAqB,IAArB;AACA;AACD;;AACD,YAAM,KAAKuB,yBAAL,EAAN;AACA;AACD;;AACD,SAAKvB,aAAL,GAAqB,IAArB;AACD;;AAEiB,QAAZwB,YAAY,CAACC,IAAD,EAAuD;AACvE,UAAM;AAAEhJ,cAAF;AAAY1G,iBAAZ;AAAyByG,cAAzB;AAAmCK,eAAnC;AAA8CxG,UAA9C;AAAoDC,qBAApD;AAAqEwG,iBAArE;AAAkF6E;AAAlF,QAAmG8D,IAAzG;AACA3O,YAAG,CAACC,IAAJ,CAAS,YAAT,EAAuB0F,QAAvB;;AACA,QAAI,CAAC,KAAKuH,aAAV,EAAyB;AACvB,YAAM,IAAIrP,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD,QAAIgN,YAAY,IAAI5L,WAAW,KAAKlE,KAAK,CAACe,QAA1C,EAAoD,MAAM,IAAI+B,KAAJ,CAAU,mDAAV,CAAN;AACpD,UAAM+Q,YAA2B,GAAG/C,cAAa,CAAC;AAChD5M,iBADgD;AAEhDyG,cAFgD;AAGhDC,cAHgD;AAIhDC,kBAAY,EAAE,KAAKwH,MAAL,CAAYxH,YAJsB;AAKhDE,sBAAgB,EAAE,KAAKsH,MAAL,CAAYtH,gBALkB;AAMhDC,eANgD;AAOhDF,YAAM,EAAE,KAAKuH,MAAL,CAAYvH,MAP4B;AAQhDG,iBARgD;AAShD6E;AATgD,KAAD,CAAjD;AAWA,QAAIgE,WAAJ;;AACA,QAAItP,IAAI,IAAIC,eAAZ,EAA6B;AAC3B,YAAM;AAAE9B,aAAF;AAAS+B,sBAAT;AAAyBS;AAAzB,UAAgDZ,wBAAwB,CAACC,IAAD,EAAOC,eAAP,CAA9E;AACA,UAAI9B,KAAJ,EAAW,MAAM,IAAIG,KAAJ,CAAUH,KAAV,CAAN;;AACX,YAAM;AAAEmJ,oBAAY,EAAEC,WAAhB;AAA6BC,gBAAQ,EAAEC;AAAvC,UAA4DvH,cAAlE;AAAA,YAAyDwH,IAAzD,qCAAkExH,cAAlE,kBAH2B,CAI3B;;;AACAoP,iBAAW,GAAG;AAAE/H,mBAAL;AAAkBE;AAAlB,SAA8BC,IAA9B;AAAoC3G,aAAK,EAAEJ;AAA3C,QAAX;AACD,KAND,MAMO;AACL6B,+BAAyB,CAAC,KAAKqL,MAAL,CAAYJ,2BAAb,CAAzB;AACA1L,uBAAiB,CAAC;AAAEwN,cAAM,EAAEvS,YAAY,CAACC,aAAvB;AAAsCmS;AAAtC,OAAD,EAA+C,KAAKvB,MAAL,CAAYJ,2BAA3D,EAAwF4B,YAAY,CAACxI,KAArG,CAAjB;AACAyI,iBAAW,GAAG,MAAMD,YAAY,CAACvI,iBAAb,CAA+B;AACjDf,iCAAyB,EAAE,KAAK8H,MAAL,CAAY9H,yBADU;AAEjDkB,qBAAa,EAAE,KAAK4G,MAAL,CAAY5G;AAFsB,OAA/B,CAApB;AAIA,UAAI,KAAK4G,MAAL,CAAYvH,MAAZ,KAAuB5J,OAAO,CAACE,QAAnC,EAA6C,OAAO,IAAP;AAC9C;;AAED,UAAM6C,QAAQ,GAAG,MAAM4P,YAAY,CAACzG,WAAb,CAAyB0G,WAAzB,CAAvB;;AACA,QAAIhE,YAAJ,EAAkB;AAChB,YAAM;AAAEkE,0BAAF;AAAsBC;AAAtB,UAAuC,MAAM,KAAKpB,iBAAL,CAAuBqB,cAAvB,CAAsC;AAAEtJ,gBAAF;AAAYkD,kBAAU,EAAE7J,QAAQ,CAAC6J;AAAjC,OAAtC,CAAnD;AACA,YAAMqG,WAAW,GAAG,MAAM,KAAK7B,KAAL,CAAW8B,gBAAX,CAA4BJ,kBAA5B,EAAgDC,YAAhD,EAA8D;AAAErJ,gBAAF;AAAYkD,kBAAU,EAAE7J,QAAQ,CAAC6J;AAAjC,OAA9D,EAA6G,IAA7G,CAA1B;AAEA,YAAMuG,GAAG,GAAG;AACVpQ,gBAAQ,EAAE,0CACLA,QADG,GAEH6P,WAFG;AADE,OAAZ;;AAMA,UAAI,OAAOK,WAAP,KAAuB,QAA3B,EAAqC;AACnC,cAAM,IAAIrR,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACD,YAAMwR,QAAkB,GAAG;AACzBC,kBAAU,EAAEJ,WAAW,CAACI,UADC;AAEzBC,cAAM,EAAE;AACNC,mBAAS,EAAEN,WAAW,CAACO,CADjB;AAENC,mBAAS,EAAER,WAAW,CAACS;AAFjB,SAFiB;AAMzBC,qBAAa,EAAEV,WAAW,CAACW,OANF;AAOzBC,kBAAU,EAAE,IAPa;AAQzBC,qBAAa,EAAE;AARU,OAA3B;AAUA,uDAAYX,GAAZ,GAAoBC,QAApB;AACD;;AAED,UAAMA,QAAQ,GAAG,MAAM,KAAKW,WAAL,CACrBrK,QADqB,EAErB3G,QAAQ,CAAC6J,UAFY,EAGrB;AAAE8C,iBAAW,EAAE3M,QAAQ,CAAC6J;AAAxB,KAHqB,EAIrBgG,WAAW,CAAC7H,OAAZ,IAAuB6H,WAAW,CAAC/H,WAJd,EAKrB9H,QAAQ,CAAC4M,mBALY,CAAvB;AAOA,qDACKyD,QADL;AAEErQ,cAAQ,EAAE,0CACLA,QADG,GAEH6P,WAFG;AAFV;AAOD;;AAE0B,QAArBoB,qBAAqB,CAACtB,IAAD,EAAmE;AAC5F;AACA,UAAM;AAAEuB,2BAAF;AAAyBC,wBAAzB;AAA6CC;AAA7C,QAAyEzB,IAA/E;;AACA,QAAI,CAAC,KAAKzB,aAAV,EAAyB;AACvB,YAAM,IAAIrP,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD,QAAI,CAACqS,qBAAD,IAA0B,CAACC,kBAA3B,IAAiD,CAACE,KAAK,CAACC,OAAN,CAAcF,uBAAd,CAAtD,EAA8F;AAC5F,YAAM,IAAIvS,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,QAAIqS,qBAAqB,KAAKnU,kBAAkB,CAACC,kBAA7C,IAAmEoU,uBAAuB,CAAC/P,MAAxB,KAAmC,CAA1G,EAA6G;AAC3G,YAAM,IAAIxC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACD,UAAM0S,gBAAkD,GAAG,EAA3D;AACA,UAAMC,gBAAuC,GAAG,EAAhD;;AACA,SAAK,MAAMC,iBAAX,IAAgCL,uBAAhC,EAAyD;AACvD,YAAM;AAAE1K,gBAAF;AAAYzG,mBAAZ;AAAyB0G,gBAAzB;AAAmCI,iBAAnC;AAA8CxG,YAA9C;AAAoDC,uBAApD;AAAqEwG;AAArE,UAAqFyK,iBAA3F;AACA,YAAM7B,YAA2B,GAAG/C,cAAa,CAAC;AAChD5M,mBADgD;AAEhDyG,gBAFgD;AAGhDC,gBAHgD;AAIhDC,oBAAY,EAAE,KAAKwH,MAAL,CAAYxH,YAJsB;AAKhDE,wBAAgB,EAAE,KAAKsH,MAAL,CAAYtH,gBALkB;AAMhDC,iBANgD;AAOhDF,cAAM,EAAE,KAAKuH,MAAL,CAAYvH,MAP4B;AAQhDG;AARgD,OAAD,CAAjD,CAFuD,CAYvD;;AACA,UAAI6I,WAAJ;;AACA,UAAItP,IAAI,IAAIC,eAAZ,EAA6B;AAC3B,cAAM;AAAE9B,eAAF;AAAS+B,wBAAT;AAAyBS;AAAzB,YAAgDZ,wBAAwB,CAACC,IAAD,EAAOC,eAAP,CAA9E;AACA,YAAI9B,KAAJ,EAAW,MAAM,IAAIG,KAAJ,CAAUH,KAAV,CAAN;;AACX,cAAM;AAAEmJ,sBAAY,EAAEC,WAAhB;AAA6BC,kBAAQ,EAAEC;AAAvC,YAA4DvH,cAAlE;AAAA,cAAyDwH,IAAzD,qCAAkExH,cAAlE,cAH2B,CAI3B;;;AACAoP,mBAAW,GAAG;AAAE/H,qBAAL;AAAkBE;AAAlB,WAA8BC,IAA9B;AAAoC3G,eAAK,EAAEJ;AAA3C,UAAX;AACD,OAND,MAMO;AACL6B,iCAAyB,CAAC,KAAKqL,MAAL,CAAYJ,2BAAb,CAAzB;AACA1L,yBAAiB,CAAC;AAAEwN,gBAAM,EAAEvS,YAAY,CAACE,uBAAvB;AAAgDkS;AAAhD,SAAD,EAAyD,KAAKvB,MAAL,CAAYJ,2BAArE,EAAkG4B,YAAY,CAACxI,KAA/G,CAAjB;AACAyI,mBAAW,GAAG,MAAMD,YAAY,CAACvI,iBAAb,CAA+B;AACjDf,mCAAyB,EAAE,KAAK8H,MAAL,CAAY9H,yBADU;AAEjDkB,uBAAa,EAAE,KAAK4G,MAAL,CAAY5G;AAFsB,SAA/B,CAApB;AAIA,YAAI,KAAK4G,MAAL,CAAYvH,MAAZ,KAAuB5J,OAAO,CAACE,QAAnC,EAA6C,OAAO,IAAP;AAC9C,OA5BsD,CA6BvD;;;AAEAoU,sBAAgB,CAACG,IAAjB,CAAsB9B,YAAY,CAACzG,WAAb,CAAyB0G,WAAzB,CAAtB;AACA2B,sBAAgB,CAACE,IAAjB,CAAsB7B,WAAtB;AACD;;AACD,UAAM8B,cAAc,GAAG,MAAMtT,OAAO,CAACuT,GAAR,CAAYL,gBAAZ,CAA7B;;AACA,UAAMM,aAAa,GAAGF,cAAc,CAACG,GAAf,CAAoB9R,QAAD,uBAAC,uBAAmBA,QAApB;AAA8B+R,uBAAiB,EAAEZ;AAAjD,MAAnB,CAAtB;;AACA,UAAMa,uBAAuB,GAAG;AAAEC,mBAAa,EAAE,EAAjB;AAAqBC,sBAAgB,EAAE,EAAvC;AAA2CvF,iBAAW,EAAE;AAAxD,KAAhC;AACA,UAAMwF,qBAAqB,GAAG,EAA9B;AACA,QAAIC,mBAAmB,GAAG,EAA1B;AACA,QAAIxF,mBAAmB,GAAG,EAA1B;;AACA,SAAK,IAAIyF,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGjB,uBAAuB,CAAC/P,MAApD,EAA4DgR,KAAK,IAAI,CAArE,EAAwE;AACtE,YAAMxC,WAAW,GAAG2B,gBAAgB,CAACa,KAAD,CAApC;AACA,YAAM;AAAErK,eAAF;AAAWF;AAAX,UAA2B+H,WAAjC;AACA,YAAM7P,QAAQ,GAAG6R,aAAa,CAACQ,KAAD,CAA9B;AACAL,6BAAuB,CAACC,aAAxB,CAAsCP,IAAtC,CAA2C;AAAE/E,mBAAW,EAAE3M,QAAQ,CAAC6J,UAAxB;AAAoCyI,eAAO,EAAEtK,OAAO,IAAIF;AAAxD,OAA3C;AACAkK,6BAAuB,CAACE,gBAAxB,CAAyCR,IAAzC,CAA8C1R,QAAQ,CAAC2G,QAAvD;AACAwL,2BAAqB,CAACT,IAAtB,CAA2B1J,OAAO,IAAIF,WAAtC;AACAsK,yBAAmB,GAAGpS,QAAQ,CAAC6J,UAA/B,CAPsE,CAO3B;;AAC3C+C,yBAAmB,GAAG5M,QAAQ,CAAC4M,mBAA/B;AACD;;AACDuF,yBAAqB,CAACI,IAAtB;AACA,UAAMC,gBAAgB,GAAGC,yCAAS,CAACN,qBAAqB,CAACO,IAAtB,CAA2BC,MAAM,CAACC,YAAP,CAAoB,EAApB,CAA3B,CAAD,CAAT,CAA+DpT,KAA/D,CAAqE,CAArE,CAAzB;AACAwS,2BAAuB,CAACrF,WAAxB,GAAsCyF,mBAAtC;AACA,UAAM/B,QAAQ,GAAG,MAAM,KAAKW,WAAL,CAAiBG,kBAAjB,EAAqCiB,mBAArC,EAA0DJ,uBAA1D,EAAmFQ,gBAAnF,EAAqG5F,mBAArG,CAAvB;AACA,qDACKyD,QADL;AAEErQ,cAAQ,EAAE6R,aAAa,CAACC,GAAd,CAAkB,CAAC9P,CAAD,EAAIqQ,KAAJ,wBAAC,uBAAmBrQ,CAApB,GAA0BwP,gBAAgB,CAACa,KAAD,CAA1C,CAAlB;AAFZ;AAID;;AAEgC,QAA3BQ,2BAA2B,CAAClD,IAAD,EAA+E;AAC9G,UAAM;AAAEmD,iBAAF;AAAeC;AAAf,QAAwCpD,IAA9C,CAD8G,CAE9G;;AACA,QAAI,CAAC,KAAKzB,aAAV,EAAyB;AACvB,YAAM,IAAIrP,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD,QACE,CAACkU,oBAAoB,CAAC7B,qBAAtB,IACA,CAAC6B,oBAAoB,CAAC5B,kBADtB,IAEA,CAACE,KAAK,CAACC,OAAN,CAAcyB,oBAAoB,CAAC3B,uBAAnC,CAHH,EAIE;AACA,YAAM,IAAIvS,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,QACEkU,oBAAoB,CAAC7B,qBAArB,KAA+CnU,kBAAkB,CAACC,kBAAlE,IACA+V,oBAAoB,CAAC3B,uBAArB,CAA6C/P,MAA7C,KAAwD,CAF1D,EAGE;AACA,YAAM,IAAIxC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACD,UAAM;AAAEoB,iBAAF;AAAeyG,cAAf;AAAyBC,cAAzB;AAAmCI,eAAnC;AAA8CxG,UAA9C;AAAoDC,qBAApD;AAAqEwG;AAArE,QAAqF8L,WAA3F;AACA,UAAMlD,YAA2B,GAAG/C,cAAa,CAAC;AAChD5M,iBADgD;AAEhDyG,cAFgD;AAGhDC,cAHgD;AAIhDC,kBAAY,EAAE,KAAKwH,MAAL,CAAYxH,YAJsB;AAKhDE,sBAAgB,EAAE,KAAKsH,MAAL,CAAYtH,gBALkB;AAMhDC,eANgD;AAOhDF,YAAM,EAAE,KAAKuH,MAAL,CAAYvH,MAP4B;AAQhDG;AARgD,KAAD,CAAjD;AAUA,QAAI6I,WAAJ;;AACA,QAAItP,IAAI,IAAIC,eAAZ,EAA6B;AAC3B,YAAM;AAAE9B,aAAF;AAAS+B,sBAAT;AAAyBS;AAAzB,UAAgDZ,wBAAwB,CAACC,IAAD,EAAOC,eAAP,CAA9E;AACA,UAAI9B,KAAJ,EAAW,MAAM,IAAIG,KAAJ,CAAUH,KAAV,CAAN;;AACX,YAAM;AAAEmJ,oBAAY,EAAEC,WAAhB;AAA6BC,gBAAQ,EAAEC;AAAvC,UAA4DvH,cAAlE;AAAA,YAAyDwH,IAAzD,qCAAkExH,cAAlE,cAH2B,CAI3B;;;AACAoP,iBAAW,GAAG;AAAE/H,mBAAL;AAAkBE;AAAlB,SAA8BC,IAA9B;AAAoC3G,aAAK,EAAEJ;AAA3C,QAAX;AACD,KAND,MAMO;AACL6B,+BAAyB,CAAC,KAAKqL,MAAL,CAAYJ,2BAAb,CAAzB;AACA1L,uBAAiB,CAAC;AAAEwN,cAAM,EAAEvS,YAAY,CAACG,8BAAvB;AAAuDiS;AAAvD,OAAD,EAAgE,KAAKvB,MAAL,CAAYJ,2BAA5E,EAAyG4B,YAAY,CAACxI,KAAtH,CAAjB;AACAyI,iBAAW,GAAG,MAAMD,YAAY,CAACvI,iBAAb,CAA+B;AACjDf,iCAAyB,EAAE,KAAK8H,MAAL,CAAY9H,yBADU;AAEjDkB,qBAAa,EAAE,KAAK4G,MAAL,CAAY5G;AAFsB,OAA/B,CAApB;AAIA,UAAI,KAAK4G,MAAL,CAAYvH,MAAZ,KAAuB5J,OAAO,CAACE,QAAnC,EAA6C,OAAO,IAAP;AAC9C;;AAED,UAAM6C,QAAQ,GAAG,MAAM4P,YAAY,CAACzG,WAAb,CAAyB0G,WAAzB,CAAvB;AACA,UAAMmD,gBAAgB,GAAG,KAAKhC,WAAL,CACvBrK,QADuB,EAEvB3G,QAAQ,CAAC6J,UAFc,EAGvB;AAAE8C,iBAAW,EAAE3M,QAAQ,CAAC6J;AAAxB,KAHuB,EAIvBgG,WAAW,CAAC7H,OAAZ,IAAuB6H,WAAW,CAAC/H,WAJZ,EAKvB9H,QAAQ,CAAC4M,mBALc,CAAzB;AAQA,UAAM;AAAEuE,wBAAF;AAAsBC;AAAtB,QAAkD2B,oBAAxD;AACA,UAAMf,uBAAuB,GAAG;AAAEC,mBAAa,EAAE,EAAjB;AAAqBC,sBAAgB,EAAE,EAAvC;AAA2CvF,iBAAW,EAAE;AAAxD,KAAhC;AACA,UAAMwF,qBAAqB,GAAG,EAA9B;AACA,QAAIC,mBAAmB,GAAG,EAA1B;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGjB,uBAAuB,CAAC/P,MAApD,EAA4DgR,KAAK,IAAI,CAArE,EAAwE;AACtE,YAAMhS,GAAG,GAAG+Q,uBAAuB,CAACiB,KAAD,CAAnC;AACA,YAAM;AAAErK,eAAF;AAAWF;AAAX,UAA2B+H,WAAjC;AACAmC,6BAAuB,CAACC,aAAxB,CAAsCP,IAAtC,CAA2C;AAAE/E,mBAAW,EAAE3M,QAAQ,CAAC6J,UAAxB;AAAoCyI,eAAO,EAAEtK,OAAO,IAAIF;AAAxD,OAA3C;AACAkK,6BAAuB,CAACE,gBAAxB,CAAyCR,IAAzC,CAA8CrR,GAAG,CAACsG,QAAlD;AACAwL,2BAAqB,CAACT,IAAtB,CAA2B1J,OAAO,IAAIF,WAAtC;AACAsK,yBAAmB,GAAGpS,QAAQ,CAAC6J,UAA/B,CANsE,CAM3B;AAC5C;;AACDsI,yBAAqB,CAACI,IAAtB;AACA,UAAMC,gBAAgB,GAAGC,yCAAS,CAACN,qBAAqB,CAACO,IAAtB,CAA2BC,MAAM,CAACC,YAAP,CAAoB,EAApB,CAA3B,CAAD,CAAT,CAA+DpT,KAA/D,CAAqE,CAArE,CAAzB;AACAwS,2BAAuB,CAACrF,WAAxB,GAAsCyF,mBAAtC;AACA,UAAMa,gBAAgB,GAAG,KAAKjC,WAAL,CACvBG,kBADuB,EAEvBiB,mBAFuB,EAGvBJ,uBAHuB,EAIvBQ,gBAJuB,EAKvBxS,QAAQ,CAAC4M,mBALc,CAAzB;AAOA,UAAM,CAACsG,SAAD,EAAYC,SAAZ,IAAyB,MAAM9U,OAAO,CAACuT,GAAR,CAAY,CAACoB,gBAAD,EAAmBC,gBAAnB,CAAZ,CAArC;AACA,WAAO;AACLH,iBAAW,EAAE;AACX9S,gBAAQ,EAAE,0CAAKA,QAAP,GAAoB6P,WAApB;AADC,SAENqD,SAFM,CADN;AAKLE,qBAAe,EAAE,CAACD,SAAD;AALZ,KAAP;AAOD;;AAEgB,QAAXnC,WAAW,CACfrK,QADe,EAEfkD,UAFe,EAGfwJ,cAHe,EAIfrL,OAJe,EAKfsL,gBALe,EAMI;AACnB,UAAM;AAAEvD,wBAAF;AAAsBC,kBAAtB;AAAoCuD;AAApC,QAAqD,MAAM,KAAK3E,iBAAL,CAAuBqB,cAAvB,CAAsC;AAAEtJ,cAAF;AAAYkD;AAAZ,KAAtC,CAAjE;AACA7I,YAAG,CAAC0L,KAAJ,CAAU,0BAAV,EAAsC;AAAEqD,wBAAF;AAAsBC,kBAAtB;AAAoCuD;AAApC,KAAtC;AAEA,UAAM1C,OAAO,GAAG,MAAM,KAAKxC,KAAL,CAAW8B,gBAAX,CAA4BJ,kBAA5B,EAAgDC,YAAhD,EAA8D;AAAErJ,cAAF;AAAYkD;AAAZ,KAA9D,EAAwF,IAAxF,CAAtB;AACA,QAAI,OAAOgH,OAAP,KAAmB,QAAvB,EAAiC,MAAM,IAAIhS,KAAJ,CAAU,2BAAV,CAAN;AACjCmC,YAAG,CAAC0L,KAAJ,CAAU,0BAAV,EAAsC;AAAEyD,sBAAgB,EAAEU;AAApB,KAAtC;AAEA,UAAM2C,MAAM,GAAG,MAAM,KAAKnF,KAAL,CAAWoF,cAAX,CAA0B1D,kBAA1B,EAA8CwD,YAA9C,EAA4D5M,QAA5D,EAAsE0M,cAAtE,EAAsFrL,OAAtF,EAA+FsL,gBAA/F,CAArB;;AACA,QAAIE,MAAM,CAACE,UAAP,CAAkB5T,WAAlB,OAAoC+Q,OAAO,CAACA,OAAR,CAAgB/Q,WAAhB,EAAxC,EAAuE;AACrE,YAAM,IAAIjB,KAAJ,CAAU,iDAAV,CAAN;AACD;;AACDmC,YAAG,CAAC0L,KAAJ,CAAU,0BAAV,EAAsC;AAAE+G,oBAAc,EAAED;AAAlB,KAAtC;AAEA,WAAO;AACL5C,mBAAa,EAAE4C,MAAM,CAACE,UAAP,CAAkBnU,QAAlB,EADV;AAELuR,gBAAU,EAAE0C,MAAM,CAACG,OAAP,CAAepU,QAAf,EAFP;AAGLwR,mBAAa,EAAEyC,MAAM,CAACzC,aAAP,CAAqBxR,QAArB,CAA8B,KAA9B,CAHV;AAIL+Q,gBAAU,EAAEO,OAAO,CAACP,UAJf;AAKLC,YAAM,EAAE;AACNC,iBAAS,EAAEK,OAAO,CAACJ,CADb;AAENC,iBAAS,EAAEG,OAAO,CAACF;AAFb;AALH,KAAP;AAUD;;AAEyB,QAApBiD,oBAAoB,CACxBjN,QADwB,EAExBkD,UAFwB,EAEJ;AACpBgK,sBAHwB,EAIL;AACnB,UAAM7B,uBAAuB,GAAG;AAAEC,mBAAa,EAAE,EAAjB;AAAqBC,sBAAgB,EAAE,EAAvC;AAA2CvF,iBAAW,EAAE;AAAxD,KAAhC;AACA,UAAMwF,qBAAqB,GAAG,EAA9B;AACA,QAAIvF,mBAAmB,GAAG,EAA1B;;AACA,SAAK,IAAIyF,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGwB,oBAAoB,CAACxS,MAAjD,EAAyDgR,KAAK,IAAI,CAAlE,EAAqE;AACnE,YAAMrS,QAAQ,GAAG6T,oBAAoB,CAACxB,KAAD,CAArC;AACAL,6BAAuB,CAACC,aAAxB,CAAsCP,IAAtC,CAA2C;AAAE/E,mBAAW,EAAE9C,UAAf;AAA2ByI,eAAO,EAAEtS,QAAQ,CAACgI;AAA7C,OAA3C;AACAgK,6BAAuB,CAACE,gBAAxB,CAAyCR,IAAzC,CAA8C1R,QAAQ,CAAC2G,QAAvD;AACAwL,2BAAqB,CAACT,IAAtB,CAA2B1R,QAAQ,CAACgI,OAApC;AACA4E,yBAAmB,GAAG5M,QAAQ,CAAC4M,mBAA/B;AACD;;AACDuF,yBAAqB,CAACI,IAAtB;AACA,UAAMC,gBAAgB,GAAGC,yCAAS,CAACN,qBAAqB,CAACO,IAAtB,CAA2BC,MAAM,CAACC,YAAP,CAAoB,EAApB,CAA3B,CAAD,CAAT,CAA+DpT,KAA/D,CAAqE,CAArE,CAAzB;AACAwS,2BAAuB,CAACrF,WAAxB,GAAsC9C,UAAtC;AACA,WAAO,KAAKmH,WAAL,CAAiBrK,QAAjB,EAA2BkD,UAA3B,EAAuCmI,uBAAvC,EAAgEQ,gBAAhE,EAAkF5F,mBAAlF,CAAP;AACD;;AAEDkH,0BAAwB,CAACH,OAAD,EAAkBvM,KAAlB,EAAyC;AAC/D,WAAO,KAAKiH,KAAL,CAAWyF,wBAAX,CAAoCH,OAApC,EAA6CvM,KAA7C,CAAP;AACD;;AAEsB,QAAjB2M,iBAAiB,GAAsG;AAAA,QAArG;AAAEC,gBAAU,GAAG,IAAf;AAAqBC,uBAAiB,GAAG;AAAzC,KAAqG,uEAA7B,EAA6B;AAC3H,UAAM,KAAKhF,IAAL,CAAU;AAAEE,cAAQ,EAAE;AAAZ,KAAV,CAAN;AACA,UAAMlQ,GAAG,GAAG,IAAIkG,GAAJ,CAAQpD,MAAM,CAACwE,QAAP,CAAgBrH,IAAxB,CAAZ;AACA,UAAMqB,IAAI,GAAGtB,GAAG,CAACsB,IAAJ,CAAS2T,SAAT,CAAmB,CAAnB,CAAb;AACA,UAAMC,WAAW,GAAG,EAApB;AACAlV,OAAG,CAACmG,YAAJ,CAAiBnC,OAAjB,CAAyB,CAACmR,KAAD,EAAQlR,GAAR,KAAgB;AACvCiR,iBAAW,CAACjR,GAAD,CAAX,GAAmBkR,KAAnB;AACD,KAFD;;AAIA,QAAIJ,UAAJ,EAAgB;AACd,YAAMK,QAAQ,GAAGtS,MAAM,CAACwE,QAAP,CAAgB+N,MAAhB,GAAyBvS,MAAM,CAACwE,QAAP,CAAgB8D,QAA1D;AACAtI,YAAM,CAACwS,OAAP,CAAeC,YAAf,CAA4B,IAA5B,EAAkC,EAAlC,EAAsCH,QAAtC;AACD;;AAED,QAAI,CAAC9T,IAAD,IAASY,MAAM,CAACC,IAAP,CAAY+S,WAAZ,EAAyB9S,MAAzB,KAAoC,CAAjD,EAAoD;AAClD,YAAM,IAAIxC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,UAAM;AAAEH,WAAF;AAASwC,wBAAT;AAA6BT;AAA7B,QAAgDH,wBAAwB,CAACC,IAAD,EAAO4T,WAAP,CAA9E;AAEA,UAAM;AAAEhN;AAAF,QAAiBjG,kBAAvB;AAEAF,YAAG,CAACC,IAAJ,CAASkG,UAAT,EAAqB,YAArB;;AAEA,kCAAkCxE,oBAAoB,CAAC,KAAKyL,MAAL,CAAYJ,2BAAb,EAA0C7G,UAA1C,CAAtD;AAAA,UAAM;AAAEwI,UAAF;AAAQG;AAAR,KAAN;AAAA,UAAyB7H,IAAzB;;AACAjH,YAAG,CAACC,IAAJ,CAAS0O,IAAT,EAAeG,MAAf;;AAEA,QAAImE,iBAAJ,EAAuB;AACrBnR,8BAAwB,CAAC,KAAKsL,MAAL,CAAYJ,2BAAb,EAA0C7G,UAA1C,CAAxB;AACD;;AAED,QAAIzI,KAAJ,EAAW;AACT,aAAO;AAAEA,aAAF;AAAS4C,aAAK,EAAEJ,kBAAkB,IAAI,EAAtC;AAA0C4O,cAA1C;AAAkDlP,cAAM,EAAE,EAA1D;AAA8DH,sBAA9D;AAA8EkP;AAA9E,OAAP;AACD;;AAED,QAAI/O,MAAJ;;AAEA,QAAI;AACF,UAAIkP,MAAM,KAAKvS,YAAY,CAACC,aAA5B,EAA2C;AACzC,cAAMiX,UAAU,GAAG9E,IAAnB;AACA8E,kBAAU,CAAClU,IAAX,GAAkBA,IAAlB;AACAkU,kBAAU,CAACjU,eAAX,GAA6B2T,WAA7B;AACAvT,cAAM,GAAG,MAAM,KAAK8O,YAAL,CAAkB+E,UAAlB,CAAf;AACD,OALD,MAKO,IAAI3E,MAAM,KAAKvS,YAAY,CAACE,uBAA5B,EAAqD;AAC1D,cAAMgX,UAAU,GAAG9E,IAAnB;AACA8E,kBAAU,CAACrD,uBAAX,CAAmCnO,OAAnC,CAA4CjB,CAAD,IAAO;AAChDA,WAAC,CAACzB,IAAF,GAASA,IAAT;AACAyB,WAAC,CAACxB,eAAF,GAAoB2T,WAApB;AACD,SAHD;AAIAvT,cAAM,GAAG,MAAM,KAAKqQ,qBAAL,CAA2BwD,UAA3B,CAAf;AACD,OAPM,MAOA,IAAI3E,MAAM,KAAKvS,YAAY,CAACG,8BAA5B,EAA4D;AACjE,cAAM+W,UAAU,GAAG9E,IAAnB;AACA8E,kBAAU,CAAC3B,WAAX,CAAuBvS,IAAvB,GAA8BA,IAA9B;AACAkU,kBAAU,CAAC3B,WAAX,CAAuBtS,eAAvB,GAAyC2T,WAAzC;AACAvT,cAAM,GAAG,MAAM,KAAKiS,2BAAL,CAAiC4B,UAAjC,CAAf;AACD;AACF,KAnBD,CAmBE,OAAOC,GAAP,EAAY;AACZ1T,cAAG,CAACtC,KAAJ,CAAUgW,GAAV;AACA;AACEhW,aAAK,qDAA8C,CAAAgW,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEC,OAAL,KAAgB,EAA9D,CADP;AAEErT,aAAK,EAAEJ,kBAAkB,IAAI,EAF/B;AAGE4O,cAHF;AAIElP,cAAM,EAAE,EAJV;AAKEH,sBALF;AAMEkP;AANF,SAOK1H,IAPL;AASD;;AAED,QAAI,CAACrH,MAAL,EACE,OAAO;AACLlC,WAAK,EAAE,yBADT;AAEE4C,WAAK,EAAEJ,kBAAkB,IAAI,EAF/B;AAGE4O,YAHF;AAIElP,YAAM,EAAE,EAJV;AAKEH,oBALF;AAMEkP;AANF,OAOK1H,IAPL;AAUF;AAAS6H,YAAT;AAAiBlP,YAAjB;AAAyBU,WAAK,EAAEJ,kBAAkB,IAAI,EAAtD;AAA0DT,oBAA1D;AAA0EkP;AAA1E,OAAmF1H,IAAnF;AACD;;AAEsC,QAAzBwH,yBAAyB,GAAkB;AACvD,QAAI,CAACzL,QAAL,EAAe,OAAO3F,OAAO,CAACC,OAAR,EAAP;AACf,WAAO,IAAID,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMqW,YAAY,GAAG5Q,QAAQ,CAAC6Q,aAAT,CAAuB,MAAvB,CAArB;AACAD,kBAAY,CAAC1V,IAAb,GAAoB,KAAKkP,MAAL,CAAYxH,YAAhC;AACA,UAAI7E,MAAM,CAACwE,QAAP,CAAgB+N,MAAhB,KAA2B,IAAInP,GAAJ,CAAQ,KAAKiJ,MAAL,CAAYxH,YAApB,EAAkC0N,MAAjE,EAAyEM,YAAY,CAACE,WAAb,GAA2B,WAA3B;AACzEF,kBAAY,CAAC/S,IAAb,GAAoB,WAApB;AACA+S,kBAAY,CAACG,GAAb,GAAmB,UAAnB;;AACA,YAAMC,SAAS,GAAG,MAAM;AACtB,aAAK9G,aAAL,GAAqB,IAArB;AACA5P,eAAO;AACR,OAHD;;AAIA,UAAI;AACF,YAAIsW,YAAY,CAACK,OAAb,IAAwBL,YAAY,CAACK,OAAb,CAAqBC,QAAjD,EAA2D;AACzD,cAAIN,YAAY,CAACK,OAAb,CAAqBC,QAArB,CAA8B,UAA9B,CAAJ,EAA+C;AAC7CN,wBAAY,CAACO,MAAb,GAAsBH,SAAtB;;AACAJ,wBAAY,CAACQ,OAAb,GAAuB,MAAM;AAC3B7W,oBAAM,CAAC,IAAIM,KAAJ,yFAA2F,KAAKuP,MAAL,CAAYxH,YAAvG,EAAD,CAAN;AACD,aAFD;;AAGA5C,oBAAQ,CAACqR,IAAT,CAAcC,WAAd,CAA0BV,YAA1B;AACD,WAND,MAMO;AACL;AACAI,qBAAS;AACV;AACF,SAXD,MAWO;AACL;AACAA,mBAAS;AACV;AACF,OAhBD,CAgBE,OAAON,GAAP,EAAY;AACZM,iBAAS;AACV;AACF,KA7BM,CAAP;AA8BD;;AAvfc;;AA0fFvH,0DAAf,E;;AC3iBA;AACA;AACA;AACA","file":"customauth.cjs.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@toruslabs/http-helpers\");","module.exports = require(\"lodash.merge\");","module.exports = require(\"@babel/runtime/helpers/objectWithoutProperties\");","module.exports = require(\"loglevel\");","module.exports = require(\"jwt-decode\");","module.exports = require(\"@toruslabs/fetch-node-details\");","module.exports = require(\"broadcast-channel\");","module.exports = require(\"web3-utils\");","module.exports = require(\"@toruslabs/torus.js\");","module.exports = require(\"events\");","module.exports = require(\"@chaitanyapotti/register-service-worker\");","import { ETHEREUM_NETWORK } from \"@toruslabs/fetch-node-details\";\n\nexport const TORUS_NETWORK = {\n  TESTNET: \"testnet\",\n  MAINNET: \"mainnet\",\n  CYAN: \"cyan\",\n} as const;\n\nexport const LOGIN = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  GITHUB: \"github\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  LINE: \"line\",\n  EMAIL_PASSWORD: \"email_password\",\n  PASSWORDLESS: \"passwordless\",\n  JWT: \"jwt\",\n  WEBAUTHN: \"webauthn\",\n} as const;\n\nexport const AGGREGATE_VERIFIER = {\n  SINGLE_VERIFIER_ID: \"single_id_verifier\",\n  // AND_AGGREGATE_VERIFIER : \"and_aggregate_verifier\",\n  // OR_AGGREGATE_VERIFIER : \"or_aggregate_verifier\",\n} as const;\n\nexport const UX_MODE = {\n  POPUP: \"popup\",\n  REDIRECT: \"redirect\",\n} as const;\n\nexport const REDIRECT_PARAMS_STORAGE_METHOD = {\n  LOCAL_STORAGE: \"localStorage\",\n  SESSION_STORAGE: \"sessionStorage\",\n};\n\nexport const TORUS_METHOD = {\n  TRIGGER_LOGIN: \"triggerLogin\",\n  TRIGGER_AGGREGATE_LOGIN: \"triggerAggregateLogin\",\n  TRIGGER_AGGREGATE_HYBRID_LOGIN: \"triggerHybridAggregateLogin\",\n} as const;\n\nexport type TORUS_NETWORK_TYPE = typeof TORUS_NETWORK[keyof typeof TORUS_NETWORK];\nexport type LOGIN_TYPE = typeof LOGIN[keyof typeof LOGIN];\nexport type AGGREGATE_VERIFIER_TYPE = typeof AGGREGATE_VERIFIER[keyof typeof AGGREGATE_VERIFIER];\nexport type UX_MODE_TYPE = typeof UX_MODE[keyof typeof UX_MODE];\nexport type TORUS_METHOD_TYPE = typeof TORUS_METHOD[keyof typeof TORUS_METHOD];\nexport type REDIRECT_PARAMS_STORAGE_METHOD_TYPE = typeof REDIRECT_PARAMS_STORAGE_METHOD[keyof typeof REDIRECT_PARAMS_STORAGE_METHOD];\n\nexport const CONTRACT_MAP = {\n  [TORUS_NETWORK.MAINNET]: \"0xf20336e16B5182637f09821c27BDe29b0AFcfe80\",\n  [TORUS_NETWORK.TESTNET]: \"0x6258c9d6c12ed3edda59a1a6527e469517744aa7\",\n  [TORUS_NETWORK.CYAN]: \"0x9f072ba19b3370e512aa1b4bfcdaf97283168005\",\n};\n\nexport const NETWORK_MAP = {\n  [TORUS_NETWORK.MAINNET]: ETHEREUM_NETWORK.MAINNET,\n  [TORUS_NETWORK.TESTNET]: ETHEREUM_NETWORK.ROPSTEN,\n  [TORUS_NETWORK.CYAN]: ETHEREUM_NETWORK.POLYGON,\n};\n\nexport const SIGNER_MAP = {\n  [TORUS_NETWORK.MAINNET]: \"https://signer.tor.us\",\n  [TORUS_NETWORK.TESTNET]: \"https://signer.tor.us\",\n  [TORUS_NETWORK.CYAN]: \"https://signer-polygon.tor.us\",\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"customauth\");\n","import { Auth0UserInfo, LoginDetails, TorusGenericObject } from \"../handlers/interfaces\";\nimport { LOGIN, LOGIN_TYPE, REDIRECT_PARAMS_STORAGE_METHOD, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from \"./enums\";\nimport log from \"./loglevel\";\n\ninterface CustomMessageEvent extends MessageEvent {\n  error: string;\n}\n\ninterface EventListener {\n  (evt: CustomMessageEvent): void;\n}\n\ntype EmitterType = { addEventListener(type: string, handler: EventListener): void; removeEventListener(type: string, handler: EventListener): void };\n\nexport function eventToPromise<T>(emitter: EmitterType): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    const handler = (ev: CustomMessageEvent) => {\n      const { error = \"\", data } = ev;\n      emitter.removeEventListener(\"message\", handler);\n      if (error) return reject(new Error(error));\n      return resolve(data as T);\n    };\n    emitter.addEventListener(\"message\", handler);\n  });\n}\n\n// These are the connection names used by auth0\nexport const loginToConnectionMap = {\n  [LOGIN.APPLE]: \"apple\",\n  [LOGIN.GITHUB]: \"github\",\n  [LOGIN.LINKEDIN]: \"linkedin\",\n  [LOGIN.TWITTER]: \"twitter\",\n  [LOGIN.WEIBO]: \"weibo\",\n  [LOGIN.LINE]: \"line\",\n  [LOGIN.EMAIL_PASSWORD]: \"Username-Password-Authentication\",\n  [LOGIN.PASSWORDLESS]: \"email\",\n};\n\nexport const padUrlString = (url: URL): string => (url.href.endsWith(\"/\") ? url.href : `${url.href}/`);\n\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\nexport const randomId = (): string => Math.random().toString(36).slice(2);\n\nexport const broadcastChannelOptions = {\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false, // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\n\nfunction caseSensitiveField(field: string, isCaseSensitive?: boolean): string {\n  return isCaseSensitive ? field : field.toLowerCase();\n}\n\nexport const getVerifierId = (\n  userInfo: Auth0UserInfo,\n  typeOfLogin: LOGIN_TYPE,\n  verifierIdField?: string,\n  isVerifierIdCaseSensitive = true\n): string => {\n  const { name, sub } = userInfo;\n  if (verifierIdField) return caseSensitiveField(userInfo[verifierIdField], isVerifierIdCaseSensitive);\n  switch (typeOfLogin) {\n    case LOGIN.PASSWORDLESS:\n    case LOGIN.EMAIL_PASSWORD:\n      return caseSensitiveField(name, isVerifierIdCaseSensitive);\n    case LOGIN.WEIBO:\n    case LOGIN.GITHUB:\n    case LOGIN.TWITTER:\n    case LOGIN.APPLE:\n    case LOGIN.LINKEDIN:\n    case LOGIN.LINE:\n    case LOGIN.JWT:\n      return caseSensitiveField(sub, isVerifierIdCaseSensitive);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport const handleRedirectParameters = (\n  hash: string,\n  queryParameters: TorusGenericObject\n): { error: string; instanceParameters: TorusGenericObject; hashParameters: TorusGenericObject } => {\n  const hashParameters: TorusGenericObject = hash.split(\"&\").reduce((result, item) => {\n    const [part0, part1] = item.split(\"=\");\n    result[part0] = part1;\n    return result;\n  }, {});\n  log.info(hashParameters, queryParameters);\n  let instanceParameters: TorusGenericObject = {};\n  let error = \"\";\n  if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n    instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n    error = hashParameters.error_description || hashParameters.error || error;\n  } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n    instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n    if (queryParameters.error) error = queryParameters.error;\n  }\n  return { error, instanceParameters, hashParameters };\n};\n\nexport function storageAvailable(type: REDIRECT_PARAMS_STORAGE_METHOD_TYPE): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\nconst storageStatus = {\n  [REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE]: storageAvailable(REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE),\n  [REDIRECT_PARAMS_STORAGE_METHOD.SESSION_STORAGE]: storageAvailable(REDIRECT_PARAMS_STORAGE_METHOD.SESSION_STORAGE),\n};\n\nexport function storeLoginDetails(params: LoginDetails, storageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE, scope: string): void {\n  if (storageStatus[storageMethod]) {\n    window[storageMethod].setItem(`torus_login_${scope}`, JSON.stringify(params));\n  }\n}\n\nexport function retrieveLoginDetails(storageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE, scope: string): LoginDetails {\n  if (storageStatus[storageMethod]) {\n    const loginDetails = window[storageMethod].getItem(`torus_login_${scope}`);\n    return JSON.parse(loginDetails || \"{}\") as LoginDetails;\n  }\n  throw new Error(\"Unable to retrieve stored login details\");\n}\n\nexport function clearLoginDetailsStorage(storageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE, scope: string): void {\n  if (storageStatus[storageMethod]) {\n    window[storageMethod].removeItem(`torus_login_${scope}`);\n  }\n}\n\nexport function clearOrphanedLoginDetails(storageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE): void {\n  if (storageStatus[storageMethod]) {\n    const allStorageKeys = Object.keys(window[storageMethod]);\n    allStorageKeys.forEach((key) => {\n      if (key.startsWith(\"torus_login_\")) {\n        window[storageMethod].removeItem(key);\n      }\n    });\n  }\n}\n\nexport function getPopupFeatures(): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const w = 1200;\n  const h = 700;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const isFirefox = (): boolean => window?.navigator?.userAgent.toLowerCase().indexOf(\"firefox\") > -1 || false;\n\nexport function constructURL(params: { baseURL: string; query?: Record<string, unknown>; hash?: Record<string, unknown> }): string {\n  const { baseURL, query, hash } = params;\n\n  const url = new URL(baseURL);\n  if (query) {\n    Object.keys(query).forEach((key) => {\n      url.searchParams.append(key, query[key] as string);\n    });\n  }\n  if (hash) {\n    const h = new URL(constructURL({ baseURL, query: hash })).searchParams.toString();\n    url.hash = h;\n  }\n  return url.toString();\n}\n","import { EventEmitter } from \"events\";\n\nimport { getPopupFeatures } from \"./helpers\";\n\nclass PopupHandler extends EventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { BroadcastChannel } from \"broadcast-channel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, randomId } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport { Auth0ClientOptions, ILoginHandler, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nabstract class AbstractLoginHandler implements ILoginHandler {\n  public nonce: string = randomId();\n\n  public finalURL: URL;\n\n  // Not using object constructor because of this issue\n  // https://github.com/microsoft/TypeScript/issues/5326\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {}\n\n  get state(): string {\n    return encodeURIComponent(\n      window.btoa(\n        JSON.stringify({\n          ...(this.customState || {}),\n          instanceId: this.nonce,\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n          redirectToOpener: this.redirectToOpener || false,\n        })\n      )\n    );\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return new Promise<LoginWindowResponse>((resolve, reject) => {\n        let bc: BroadcastChannel;\n        const handleData = async (ev: { error: string; data: PopupResponse }) => {\n          try {\n            const { error, data } = ev;\n            const {\n              instanceParams,\n              hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n            } = data || {};\n            if (error) {\n              log.error(ev);\n              reject(new Error(`Error: ${error}. Info: ${JSON.stringify(ev.data || {})}`));\n              return;\n            }\n            if (ev.data && instanceParams.verifier === this.verifier) {\n              log.info(ev.data);\n              if (!this.redirectToOpener && bc) await bc.postMessage({ success: true });\n              resolve({\n                accessToken,\n                idToken: idToken || \"\",\n                ...rest,\n                // State has to be last here otherwise it will be overwritten\n                state: instanceParams,\n              });\n            }\n          } catch (error) {\n            log.error(error);\n            reject(error);\n          }\n        };\n\n        if (!this.redirectToOpener) {\n          bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n          bc.addEventListener(\"message\", async (ev) => {\n            await handleData(ev);\n            bc.close();\n            verifierWindow.close();\n          });\n        } else {\n          const postMessageEventHandler = async (postMessageEvent: MessageEvent) => {\n            if (!postMessageEvent.data) return;\n            const ev = postMessageEvent.data;\n            if (ev.channel !== `redirect_channel_${this.nonce}`) return;\n            window.removeEventListener(\"message\", postMessageEventHandler);\n            handleData(ev);\n            verifierWindow.close();\n          };\n          window.addEventListener(\"message\", postMessageEventHandler);\n        }\n        verifierWindow.open();\n        verifierWindow.once(\"close\", () => {\n          if (bc) bc.close();\n          reject(new Error(\"user closed popup\"));\n        });\n      });\n    }\n    return null;\n  }\n\n  abstract getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse>;\n\n  abstract setFinalUrl(): void;\n}\n\nexport default AbstractLoginHandler;\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class DiscordHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identify email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://discord.com/api/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ id: string; username: string; discriminator: string; avatar?: string; email?: string }>(\n      \"https://discord.com/api/users/@me\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { id, avatar, email = \"\", username: name = \"\", discriminator = \"\" } = userInfo;\n    const profileImage =\n      avatar === null\n        ? `https://cdn.discord.com/embed/avatars/${Number(discriminator) % 5}.png`\n        : `https://cdn.discord.com/avatars/${id}/${avatar}.png?size=2048`;\n    return {\n      profileImage,\n      name: `${name}#${discriminator}`,\n      email,\n      verifierId: id,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class FacebookHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"public_profile email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://www.facebook.com/v6.0/dialog/oauth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ name: string; id: string; picture: { data: { url?: string } }; email?: string }>(\n      \"https://graph.facebook.com/me?fields=name,email,picture.type(large)\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { name = \"\", id, picture, email = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage: picture.data.url || \"\",\n      verifier: this.verifier,\n      verifierId: id,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class GoogleHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly SCOPE: string = \"profile email openid\";\n\n  private readonly PROMPT: string = \"consent select_account\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ picture: string; email: string; name: string }>(\"https://www.googleapis.com/userinfo/v2/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { picture: profileImage = \"\", email = \"\", name = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage,\n      verifier: this.verifier,\n      verifierId: email.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { getVerifierId, loginToConnectionMap, padUrlString } from \"../utils/helpers\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const finalUrl = new URL(domain);\n    finalUrl.pathname += finalUrl.pathname.endsWith(\"/\") ? \"authorize\" : \"/authorize\";\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        connection: loginToConnectionMap[this.typeOfLogin],\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { constructURL, getVerifierId, padUrlString } from \"../utils/helpers\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class MockLoginHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        client_id: this.clientId,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n\n    this.finalURL = new URL(constructURL({ baseURL: this.redirect_uri, query: null, hash: finalJwtParams }));\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const { id_token: idToken, access_token: accessToken } = this.jwtParams;\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return Promise.resolve({\n        state: {},\n        idToken,\n        accessToken,\n      });\n    }\n    return null;\n  }\n}\n","import { get, post } from \"@toruslabs/http-helpers\";\nimport { BroadcastChannel } from \"broadcast-channel\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, getVerifierId, padUrlString } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const domainUrl = new URL(domain);\n    domainUrl.pathname = \"/passwordless/start\";\n    this.finalURL = domainUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive } = this.jwtParams;\n    try {\n      const domainUrl = new URL(domain);\n      const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}userinfo`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n      const { picture, name, email } = userInfo;\n      return {\n        email,\n        name,\n        profileImage: picture,\n        verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    } catch (error) {\n      log.error(error);\n      const decodedToken = jwtDecode(idToken) as Auth0UserInfo;\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n  }\n\n  handleLoginWindow(): Promise<LoginWindowResponse> {\n    return new Promise<LoginWindowResponse>((resolve, reject) => {\n      if (this.redirectToOpener) {\n        reject(new Error(\"Cannot use redirect to opener for passwordless\"));\n        return;\n      }\n      const handleData = (ev: { error: string; data: PopupResponse }) => {\n        try {\n          const { error, data } = ev;\n          const {\n            instanceParams,\n            hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n          } = data || {};\n          if (error) {\n            log.error(ev.error);\n            reject(new Error(error));\n            return;\n          }\n          if (ev.data && instanceParams.verifier === this.verifier) {\n            log.info(ev.data);\n            resolve({ accessToken, idToken: idToken || \"\", ...rest, state: instanceParams });\n          }\n        } catch (error) {\n          log.error(error);\n          reject(error);\n        }\n      };\n      const bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n      bc.addEventListener(\"message\", async (ev) => {\n        handleData(ev);\n        bc.close();\n      });\n      try {\n        const { connection = \"email\", login_hint } = this.jwtParams;\n        const finalJwtParams = deepmerge(\n          {\n            client_id: this.clientId,\n            connection,\n            email: connection === \"email\" ? login_hint : undefined,\n            phone_number: connection === \"sms\" ? login_hint : undefined,\n            send: \"link\",\n            authParams: {\n              scope: this.SCOPE,\n              state: this.state,\n              response_type: this.RESPONSE_TYPE,\n              redirect_uri: this.redirect_uri,\n              nonce: this.nonce,\n              prompt: this.PROMPT,\n            },\n          },\n          {\n            authParams: this.jwtParams,\n          }\n        );\n        // using stringify and parse to remove undefined params\n        // This method is only resolved when the user clicks the email link\n        post(this.finalURL.href, JSON.parse(JSON.stringify(finalJwtParams)))\n          .then((response) => {\n            log.info(\"posted\", response);\n            return undefined;\n          })\n          .catch((error) => {\n            log.error(error);\n            reject(error);\n          });\n      } catch (error) {\n        log.error(error);\n        reject(error);\n      }\n    });\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class RedditHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identity\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(`https://www.reddit.com/api/v1/authorize${window.innerWidth < 600 ? \".compact\" : \"\"}`);\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ icon_img: string; name: string }>(\"https://oauth.reddit.com/api/v1/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { icon_img: profileImage = \"\", name = \"\" } = userInfo;\n    return {\n      email: \"\",\n      name,\n      profileImage: profileImage.split(\"?\").length > 0 ? profileImage.split(\"?\")[0] : profileImage,\n      verifier: this.verifier,\n      verifierId: name.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class TwitchHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"user:read:email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://id.twitch.tv/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        force_verify: true,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ data: [{ profile_image_url: string; display_name: string; email: string; id: string }] }>(\n      \"https://api.twitch.tv/helix/users\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Client-ID\": this.clientId,\n        },\n      }\n    );\n    const [{ profile_image_url: profileImage = \"\", display_name: name = \"\", email = \"\", id: verifierId }] = userInfo.data || [];\n    return {\n      profileImage,\n      name,\n      email,\n      verifierId,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nconst WEBAUTHN_LOOKUP_SERVER = \"https://api.webauthn.openlogin.com\";\n\nexport default class WebAuthnHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject,\n    readonly registerOnly?: boolean\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://webauthn.openlogin.com\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        register_only: !!this.registerOnly,\n        state: this.state,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(parameters: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, ref, extraParamsPassed, extraParams } = parameters;\n    let verifierId: string;\n    let signature: string;\n    let clientDataJSON: string;\n    let authenticatorData: string;\n    let publicKey: string;\n    let challenge: string;\n    let rpOrigin: string;\n    let credId: string;\n\n    if (extraParamsPassed === \"true\") {\n      log.debug(\"extraParamsPassed is true, using extraParams passed through hashParams\");\n      try {\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n        } = JSON.parse(atob(extraParams)));\n      } catch (error) {\n        log.warn(\"unable to parse extraParams\", error);\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n        } = await get(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n      }\n    } else {\n      log.debug(\"extraParamsPassed is false, using extraParams passed through bridge server\");\n      ({\n        verifier_id: verifierId,\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n      } = await get(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n    }\n\n    if (signature !== idToken) {\n      throw new Error(\"idtoken should be equal to signature\");\n    }\n\n    return {\n      email: \"\",\n      name: \"WebAuthn Login\",\n      profileImage: \"\",\n      verifier: this.verifier,\n      verifierId,\n      typeOfLogin: this.typeOfLogin,\n      ref,\n      registerOnly: this.registerOnly,\n      extraVerifierParams: {\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n      },\n    };\n  }\n}\n","import { LOGIN } from \"../utils/enums\";\nimport DiscordHandler from \"./DiscordHandler\";\nimport FacebookHandler from \"./FacebookHandler\";\nimport GoogleHandler from \"./GoogleHandler\";\nimport { CreateHandlerParams, ILoginHandler } from \"./interfaces\";\nimport JwtHandler from \"./JwtHandler\";\nimport MockLoginHandler from \"./MockLoginHandler\";\nimport PasswordlessHandler from \"./PasswordlessHandler\";\nimport RedditHandler from \"./RedditHandler\";\nimport TwitchHandler from \"./TwitchHandler\";\nimport WebAuthnHandler from \"./WebAuthnHandler\";\n\nconst createHandler = ({\n  clientId,\n  redirect_uri,\n  typeOfLogin,\n  verifier,\n  jwtParams,\n  redirectToOpener,\n  uxMode,\n  customState,\n  registerOnly,\n}: CreateHandlerParams): ILoginHandler => {\n  if (!verifier || !typeOfLogin || !clientId) {\n    throw new Error(\"Invalid params\");\n  }\n  const { domain, login_hint, id_token, access_token } = jwtParams || {};\n  switch (typeOfLogin) {\n    case LOGIN.GOOGLE:\n      return new GoogleHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.FACEBOOK:\n      return new FacebookHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.TWITCH:\n      return new TwitchHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.REDDIT:\n      return new RedditHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.DISCORD:\n      return new DiscordHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.PASSWORDLESS:\n      if (!domain || !login_hint) throw new Error(\"Invalid params\");\n      return new PasswordlessHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.APPLE:\n    case LOGIN.GITHUB:\n    case LOGIN.LINKEDIN:\n    case LOGIN.TWITTER:\n    case LOGIN.WEIBO:\n    case LOGIN.LINE:\n    case LOGIN.EMAIL_PASSWORD:\n    case LOGIN.JWT:\n      if (!domain) throw new Error(\"Invalid params\");\n      if (id_token || access_token) {\n        return new MockLoginHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n      }\n      return new JwtHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.WEBAUTHN:\n      return new WebAuthnHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState, registerOnly);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport default createHandler;\n","import { register } from \"@chaitanyapotti/register-service-worker\";\n\nimport log from \"./utils/loglevel\";\n\nexport const registerServiceWorker = (baseUrl: string) =>\n  new Promise((resolve, reject) => {\n    const swUrl = `${baseUrl}sw.js`;\n\n    if (\"serviceWorker\" in window.navigator) {\n      // if swIntegrity is not calculated\n      register(swUrl, {\n        ready() {\n          log.info(\"App is being served from cache by a service worker.\\n For more details, visit https://goo.gl/AFskqB\");\n          resolve(undefined);\n        },\n        registered() {\n          log.info(\"Service worker has been registered.\");\n          resolve(undefined);\n        },\n        cached() {\n          log.info(\"Content has been cached for offline use.\");\n          resolve(undefined);\n        },\n        updatefound() {\n          log.info(\"New content is downloading.\");\n        },\n        updated() {\n          log.info(\"New content is available; please refresh.\");\n        },\n        offline() {\n          log.info(\"No internet connection found. App is running in offline mode.\");\n          reject(new Error(\"App is offline\"));\n        },\n        error(error) {\n          log.error(\"Error during service worker registration:\", error);\n          reject(error);\n        },\n      });\n    } else {\n      reject(new Error(\"Service workers are not supported\"));\n    }\n  });\n","import NodeDetailManager from \"@toruslabs/fetch-node-details\";\nimport Torus, { TorusNetwork } from \"@toruslabs/torus.js\";\nimport { keccak256 } from \"web3-utils\";\n\nimport createHandler from \"./handlers/HandlerFactory\";\nimport {\n  AggregateLoginParams,\n  CustomAuthArgs,\n  ExtraParams,\n  HybridAggregateLoginParams,\n  ILoginHandler,\n  InitParams,\n  LoginWindowResponse,\n  RedirectResult,\n  RedirectResultParams,\n  SingleLoginParams,\n  SubVerifierDetails,\n  TorusAggregateLoginResponse,\n  TorusHybridAggregateLoginResponse,\n  TorusKey,\n  TorusLoginResponse,\n  TorusSubVerifierInfo,\n  TorusVerifierResponse,\n} from \"./handlers/interfaces\";\nimport { registerServiceWorker } from \"./registerServiceWorker\";\nimport {\n  AGGREGATE_VERIFIER,\n  CONTRACT_MAP,\n  LOGIN,\n  NETWORK_MAP,\n  REDIRECT_PARAMS_STORAGE_METHOD,\n  REDIRECT_PARAMS_STORAGE_METHOD_TYPE,\n  SIGNER_MAP,\n  TORUS_METHOD,\n  TORUS_NETWORK,\n  UX_MODE,\n  UX_MODE_TYPE,\n} from \"./utils/enums\";\nimport {\n  clearLoginDetailsStorage,\n  clearOrphanedLoginDetails,\n  handleRedirectParameters,\n  isFirefox,\n  padUrlString,\n  retrieveLoginDetails,\n  storeLoginDetails,\n} from \"./utils/helpers\";\nimport log from \"./utils/loglevel\";\n\nclass CustomAuth {\n  isInitialized: boolean;\n\n  config: {\n    baseUrl: string;\n    redirectToOpener: boolean;\n    redirect_uri: string;\n    uxMode: UX_MODE_TYPE;\n    redirectParamsStorageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE;\n    locationReplaceOnRedirect: boolean;\n    popupFeatures: string;\n  };\n\n  torus: Torus;\n\n  nodeDetailManager: NodeDetailManager;\n\n  constructor({\n    baseUrl,\n    network = TORUS_NETWORK.MAINNET,\n    proxyContractAddress,\n    enableLogging = false,\n    enableOneKey = false,\n    redirectToOpener = false,\n    redirectPathName = \"redirect\",\n    apiKey = \"torus-default\",\n    uxMode = UX_MODE.POPUP,\n    redirectParamsStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.SESSION_STORAGE,\n    locationReplaceOnRedirect = false,\n    popupFeatures,\n    metadataUrl = \"https://metadata.tor.us\",\n  }: CustomAuthArgs) {\n    this.isInitialized = false;\n    const baseUri = new URL(baseUrl);\n    this.config = {\n      baseUrl: padUrlString(baseUri),\n      get redirect_uri() {\n        return `${this.baseUrl}${redirectPathName}`;\n      },\n      redirectToOpener,\n      uxMode,\n      redirectParamsStorageMethod,\n      locationReplaceOnRedirect,\n      popupFeatures,\n    };\n    const torus = new Torus({\n      enableOneKey,\n      metadataHost: metadataUrl,\n      allowHost: `${SIGNER_MAP[network]}/api/allow`,\n      signerHost: `${SIGNER_MAP[network]}/api/sign`,\n      network: network as TorusNetwork,\n    });\n    Torus.setAPIKey(apiKey);\n    this.torus = torus;\n    const ethNetwork = NETWORK_MAP[network];\n    this.nodeDetailManager = new NodeDetailManager({ network: ethNetwork, proxyAddress: proxyContractAddress || CONTRACT_MAP[network] });\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n  }\n\n  async init({ skipSw = false, skipInit = false, skipPrefetch = false }: InitParams = {}): Promise<void> {\n    if (skipInit) {\n      this.isInitialized = true;\n      return;\n    }\n    if (!skipSw) {\n      const fetchSwResponse = await fetch(`${this.config.baseUrl}sw.js`, { cache: \"reload\" });\n      if (fetchSwResponse.ok) {\n        try {\n          await registerServiceWorker(this.config.baseUrl);\n          this.isInitialized = true;\n          return;\n        } catch (error) {\n          log.warn(error);\n        }\n      } else {\n        throw new Error(\"Service worker is not being served. Please serve it\");\n      }\n    }\n    if (!skipPrefetch) {\n      // Skip the redirect check for firefox\n      if (isFirefox()) {\n        this.isInitialized = true;\n        return;\n      }\n      await this.handlePrefetchRedirectUri();\n      return;\n    }\n    this.isInitialized = true;\n  }\n\n  async triggerLogin(args: SingleLoginParams): Promise<TorusLoginResponse> {\n    const { verifier, typeOfLogin, clientId, jwtParams, hash, queryParameters, customState, registerOnly } = args;\n    log.info(\"Verifier: \", verifier);\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (registerOnly && typeOfLogin !== LOGIN.WEBAUTHN) throw new Error(\"registerOnly flag can only be passed for webauthn\");\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n      registerOnly,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      clearOrphanedLoginDetails(this.config.redirectParamsStorageMethod);\n      storeLoginDetails({ method: TORUS_METHOD.TRIGGER_LOGIN, args }, this.config.redirectParamsStorageMethod, loginHandler.nonce);\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    if (registerOnly) {\n      const { torusNodeEndpoints, torusNodePub } = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId: userInfo.verifierId });\n      const torusPubKey = await this.torus.getPublicAddress(torusNodeEndpoints, torusNodePub, { verifier, verifierId: userInfo.verifierId }, true);\n\n      const res = {\n        userInfo: {\n          ...userInfo,\n          ...loginParams,\n        },\n      };\n      if (typeof torusPubKey === \"string\") {\n        throw new Error(\"should have returned extended pub key\");\n      }\n      const torusKey: TorusKey = {\n        typeOfUser: torusPubKey.typeOfUser,\n        pubKey: {\n          pub_key_X: torusPubKey.X,\n          pub_key_Y: torusPubKey.Y,\n        },\n        publicAddress: torusPubKey.address,\n        privateKey: null,\n        metadataNonce: null,\n      };\n      return { ...res, ...torusKey };\n    }\n\n    const torusKey = await this.getTorusKey(\n      verifier,\n      userInfo.verifierId,\n      { verifier_id: userInfo.verifierId },\n      loginParams.idToken || loginParams.accessToken,\n      userInfo.extraVerifierParams\n    );\n    return {\n      ...torusKey,\n      userInfo: {\n        ...userInfo,\n        ...loginParams,\n      },\n    };\n  }\n\n  async triggerAggregateLogin(args: AggregateLoginParams): Promise<TorusAggregateLoginResponse> {\n    // This method shall break if any of the promises fail. This behaviour is intended\n    const { aggregateVerifierType, verifierIdentifier, subVerifierDetailsArray } = args;\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (!aggregateVerifierType || !verifierIdentifier || !Array.isArray(subVerifierDetailsArray)) {\n      throw new Error(\"Invalid params\");\n    }\n    if (aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID && subVerifierDetailsArray.length !== 1) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const userInfoPromises: Promise<TorusVerifierResponse>[] = [];\n    const loginParamsArray: LoginWindowResponse[] = [];\n    for (const subVerifierDetail of subVerifierDetailsArray) {\n      const { clientId, typeOfLogin, verifier, jwtParams, hash, queryParameters, customState } = subVerifierDetail;\n      const loginHandler: ILoginHandler = createHandler({\n        typeOfLogin,\n        clientId,\n        verifier,\n        redirect_uri: this.config.redirect_uri,\n        redirectToOpener: this.config.redirectToOpener,\n        jwtParams,\n        uxMode: this.config.uxMode,\n        customState,\n      });\n      // We let the user login to each verifier in a loop. Don't wait for key derivation here.!\n      let loginParams: LoginWindowResponse;\n      if (hash && queryParameters) {\n        const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n        if (error) throw new Error(error);\n        const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n        // State has to be last here otherwise it will be overwritten\n        loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n      } else {\n        clearOrphanedLoginDetails(this.config.redirectParamsStorageMethod);\n        storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN, args }, this.config.redirectParamsStorageMethod, loginHandler.nonce);\n        loginParams = await loginHandler.handleLoginWindow({\n          locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n          popupFeatures: this.config.popupFeatures,\n        });\n        if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n      }\n      // Fail the method even if one promise fails\n\n      userInfoPromises.push(loginHandler.getUserInfo(loginParams));\n      loginParamsArray.push(loginParams);\n    }\n    const _userInfoArray = await Promise.all(userInfoPromises);\n    const userInfoArray = _userInfoArray.map((userInfo) => ({ ...userInfo, aggregateVerifier: verifierIdentifier }));\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const loginParams = loginParamsArray[index];\n      const { idToken, accessToken } = loginParams;\n      const userInfo = userInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const torusKey = await this.getTorusKey(verifierIdentifier, aggregateVerifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n    return {\n      ...torusKey,\n      userInfo: userInfoArray.map((x, index) => ({ ...x, ...loginParamsArray[index] })),\n    };\n  }\n\n  async triggerHybridAggregateLogin(args: HybridAggregateLoginParams): Promise<TorusHybridAggregateLoginResponse> {\n    const { singleLogin, aggregateLoginParams } = args;\n    // This method shall break if any of the promises fail. This behaviour is intended\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (\n      !aggregateLoginParams.aggregateVerifierType ||\n      !aggregateLoginParams.verifierIdentifier ||\n      !Array.isArray(aggregateLoginParams.subVerifierDetailsArray)\n    ) {\n      throw new Error(\"Invalid params\");\n    }\n    if (\n      aggregateLoginParams.aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID &&\n      aggregateLoginParams.subVerifierDetailsArray.length !== 1\n    ) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const { typeOfLogin, clientId, verifier, jwtParams, hash, queryParameters, customState } = singleLogin;\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      clearOrphanedLoginDetails(this.config.redirectParamsStorageMethod);\n      storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN, args }, this.config.redirectParamsStorageMethod, loginHandler.nonce);\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    const torusKey1Promise = this.getTorusKey(\n      verifier,\n      userInfo.verifierId,\n      { verifier_id: userInfo.verifierId },\n      loginParams.idToken || loginParams.accessToken,\n      userInfo.extraVerifierParams\n    );\n\n    const { verifierIdentifier, subVerifierDetailsArray } = aggregateLoginParams;\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const sub = subVerifierDetailsArray[index];\n      const { idToken, accessToken } = loginParams;\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(sub.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const torusKey2Promise = this.getTorusKey(\n      verifierIdentifier,\n      aggregateVerifierId,\n      aggregateVerifierParams,\n      aggregateIdToken,\n      userInfo.extraVerifierParams\n    );\n    const [torusKey1, torusKey2] = await Promise.all([torusKey1Promise, torusKey2Promise]);\n    return {\n      singleLogin: {\n        userInfo: { ...userInfo, ...loginParams },\n        ...torusKey1,\n      },\n      aggregateLogins: [torusKey2],\n    };\n  }\n\n  async getTorusKey(\n    verifier: string,\n    verifierId: string,\n    verifierParams: { verifier_id: string },\n    idToken: string,\n    additionalParams?: ExtraParams\n  ): Promise<TorusKey> {\n    const { torusNodeEndpoints, torusNodePub, torusIndexes } = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId });\n    log.debug(\"torus-direct/getTorusKey\", { torusNodeEndpoints, torusNodePub, torusIndexes });\n\n    const address = await this.torus.getPublicAddress(torusNodeEndpoints, torusNodePub, { verifier, verifierId }, true);\n    if (typeof address === \"string\") throw new Error(\"must use extended pub key\");\n    log.debug(\"torus-direct/getTorusKey\", { getPublicAddress: address });\n\n    const shares = await this.torus.retrieveShares(torusNodeEndpoints, torusIndexes, verifier, verifierParams, idToken, additionalParams);\n    if (shares.ethAddress.toLowerCase() !== address.address.toLowerCase()) {\n      throw new Error(\"data ethAddress does not match response address\");\n    }\n    log.debug(\"torus-direct/getTorusKey\", { retrieveShares: shares });\n\n    return {\n      publicAddress: shares.ethAddress.toString(),\n      privateKey: shares.privKey.toString(),\n      metadataNonce: shares.metadataNonce.toString(\"hex\"),\n      typeOfUser: address.typeOfUser,\n      pubKey: {\n        pub_key_X: address.X,\n        pub_key_Y: address.Y,\n      },\n    };\n  }\n\n  async getAggregateTorusKey(\n    verifier: string,\n    verifierId: string, // unique identifier for user e.g. sub on jwt\n    subVerifierInfoArray: TorusSubVerifierInfo[]\n  ): Promise<TorusKey> {\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierInfoArray.length; index += 1) {\n      const userInfo = subVerifierInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: verifierId, idtoken: userInfo.idToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(userInfo.idToken);\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = verifierId;\n    return this.getTorusKey(verifier, verifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey: string, nonce: string): string {\n    return this.torus.getPostboxKeyFrom1OutOf1(privKey, nonce);\n  }\n\n  async getRedirectResult({ replaceUrl = true, clearLoginDetails = true }: RedirectResultParams = {}): Promise<RedirectResult> {\n    await this.init({ skipInit: true });\n    const url = new URL(window.location.href);\n    const hash = url.hash.substring(1);\n    const queryParams = {};\n    url.searchParams.forEach((value, key) => {\n      queryParams[key] = value;\n    });\n\n    if (replaceUrl) {\n      const cleanUrl = window.location.origin + window.location.pathname;\n      window.history.replaceState(null, \"\", cleanUrl);\n    }\n\n    if (!hash && Object.keys(queryParams).length === 0) {\n      throw new Error(\"Unable to fetch result from OAuth login\");\n    }\n\n    const { error, instanceParameters, hashParameters } = handleRedirectParameters(hash, queryParams);\n\n    const { instanceId } = instanceParameters;\n\n    log.info(instanceId, \"instanceId\");\n\n    const { args, method, ...rest } = retrieveLoginDetails(this.config.redirectParamsStorageMethod, instanceId);\n    log.info(args, method);\n\n    if (clearLoginDetails) {\n      clearLoginDetailsStorage(this.config.redirectParamsStorageMethod, instanceId);\n    }\n\n    if (error) {\n      return { error, state: instanceParameters || {}, method, result: {}, hashParameters, args };\n    }\n\n    let result: unknown;\n\n    try {\n      if (method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const methodArgs = args as SubVerifierDetails & { registerOnly?: boolean };\n        methodArgs.hash = hash;\n        methodArgs.queryParameters = queryParams;\n        result = await this.triggerLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const methodArgs = args as AggregateLoginParams;\n        methodArgs.subVerifierDetailsArray.forEach((x) => {\n          x.hash = hash;\n          x.queryParameters = queryParams;\n        });\n        result = await this.triggerAggregateLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN) {\n        const methodArgs = args as HybridAggregateLoginParams;\n        methodArgs.singleLogin.hash = hash;\n        methodArgs.singleLogin.queryParameters = queryParams;\n        result = await this.triggerHybridAggregateLogin(methodArgs);\n      }\n    } catch (err) {\n      log.error(err);\n      return {\n        error: `Could not get result from torus nodes \\n ${err?.message || \"\"}`,\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n    }\n\n    if (!result)\n      return {\n        error: \"Unsupported method type\",\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n\n    return { method, result, state: instanceParameters || {}, hashParameters, args, ...rest };\n  }\n\n  private async handlePrefetchRedirectUri(): Promise<void> {\n    if (!document) return Promise.resolve();\n    return new Promise((resolve, reject) => {\n      const redirectHtml = document.createElement(\"link\");\n      redirectHtml.href = this.config.redirect_uri;\n      if (window.location.origin !== new URL(this.config.redirect_uri).origin) redirectHtml.crossOrigin = \"anonymous\";\n      redirectHtml.type = \"text/html\";\n      redirectHtml.rel = \"prefetch\";\n      const resolveFn = () => {\n        this.isInitialized = true;\n        resolve();\n      };\n      try {\n        if (redirectHtml.relList && redirectHtml.relList.supports) {\n          if (redirectHtml.relList.supports(\"prefetch\")) {\n            redirectHtml.onload = resolveFn;\n            redirectHtml.onerror = () => {\n              reject(new Error(`Please serve redirect.html present in serviceworker folder of this package on ${this.config.redirect_uri}`));\n            };\n            document.head.appendChild(redirectHtml);\n          } else {\n            // Link prefetch is not supported. pass through\n            resolveFn();\n          }\n        } else {\n          // Link prefetch is not detectable. pass through\n          resolveFn();\n        }\n      } catch (err) {\n        resolveFn();\n      }\n    });\n  }\n}\n\nexport default CustomAuth;\n","export { default as createHandler } from \"./handlers/HandlerFactory\";\nexport * from \"./handlers/interfaces\";\nexport { default } from \"./login\";\nexport * from \"./utils/enums\";\nexport * from \"./utils/helpers\";\n"],"sourceRoot":""}